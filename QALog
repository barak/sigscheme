Quality Assurance Log
=====================

The file for developer's own quality management.


Checkpoints
-----------

- Specification conformance check by eyes

  Whether conforms to the expected specification (R5RS, SRFI, or
  SigScheme-local specs such as SAL).

- Specification conformance check by tests

  Ensure the conformance by tests.

- General code review (logic, structure, meaning, validity etc)

- 64-bit data model capability check by eyes

  Whether the codes are capable of LL64(ILP32), LP64, LLP64 and ILP64.

- 64-bit data model capability check by tests

  Ensure the capability by tests.

- Coding style check (doc/style.txt)

  Don't forget checking duplicate evaluation of side-effective expression on
  macro invocations.

- Normal case tests

- Corner case tests


Format and Examples
-------------------

- Free format log

  Record significant achievements to 'Log' section in ChangeLog format

2006-06-06 YamaKen <yamaken AT bp.iij4u.or.jp>

        * general code review for all core files


- Status record template

file:              
category:          
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

  * The unit for status recording is file. Check all functions in a file at a
    time
  * category = (base|core|semicore|r5rs|srfi|opt|ext|other)
  * record comma separated username@revision for each checkpoints
  * don't overwrite per-user checkpoints. i.e. record as "yamaken@r3499,
    yamaken@3670" instead of recording latest "yamaken@3670" only
  * don't fold each line
  * '-' means "unneeded"
  * blank field means "unchecked"

- Examples

file:              scmint.h
category:          base
spec by eyes:      -
spec by tests:     -
general review:    yamaken@r3499, ekato@r3499
64-bit by eyes:    yamaken@r3499, ekato@r3499
64-bit by tests:   
coding style:      yamaken@r3499
normal case tests: 
corner case tests: 

file:              syntax.c
category:          r5rs
spec by eyes:      yamaken@r3499, yamaken@3670
spec by tests:     
general review:    yamaken@r3499
64-bit by eyes:    yamaken@r3499
64-bit by tests:   -
coding style:      yamaken@r3499
normal case tests: 
corner case tests: 


Categorized File List
---------------------

- SigScheme-independent base libraries (base)

  * scmint.h
  * scmport.h
  * scmport-config.h
  * scmport-null.h
  * scmport-null.c
  * scmport-file.c
  * scmport-file.h
  * scmport-str.h
  * scmport-str.c
  * scmport-basechar.c
  * scmport-mbchar.h
  * scmport-mbchar.c
  * scmport-sbchar.h
  * scmport-sbchar.c
  * encoding.h
  * encoding-config.h
  * encoding.c
  * global.h
  * global-aggregated.c

- Core (core)

  * config-old.h
  * sigscheme.h
  * sigschemeinternal.h
  * storage-common.h
  * storage-fatty.h
  * storage-compact.h
  * storage.c
  * storage-gc.c
  * strcasecmp.c
  * alloc.c
  * error.c
  * env.c
  * symbol.c
  * continuation.c
  * eval.c
  * module.c
  * sigscheme.c

- Semi-core (semicore)

  * port.c
  * read.c
  * write.c
  * load.c
  * format.c

- R5RS Syntaxes and Procedures (r5rs)

  * syntax.c
  * procedure.c
  * number.c
  * list.c
  * deep-cadrs.c
  * char.c
  * string-core.c
  * string.c
  * vector.c
  * qquote.c
  * macro.c
  * promise.c

- SRFIs (srfi)

  * module-srfi1.c
  * module-srfi2.c
  * module-srfi6.c
  * module-srfi8.c
  * module-srfi23.c
  * module-srfi28.c
  * module-srfi34.c
  * module-srfi38.c
  * module-srfi48.c
  * module-srfi60.c

- Optional Features (opt)

  * module-sscm-ext.c
  * module-siod.c

- Others (other)

  * main.c
  * sigscheme-combined.h
  * dllentry.c


Status Summary
--------------

  $ tools/summarize_quality.rb QALog

----------------------------------------------------------------
+-------- specification conformance check by eyes
|+------- specification conformance check by tests
||+------ general code review (logic, structure, meaning, validity etc)
|||+----- 64-bit data model capability check by eyes
||||+---- 64-bit data model capability check by tests
|||||+--- coding style check (doc/style.txt)
||||||+-- normal case tests
|||||||+- corner case tests
||||||||
         base scmint.h
         base scmport.h
         base scmport-config.h
         base scmport-null.h
         base scmport-null.c
         base scmport-file.c
         base scmport-file.h
         base scmport-str.h
         base scmport-str.c
         base scmport-basechar.c
         base scmport-mbchar.h
         base scmport-mbchar.c
         base scmport-sbchar.h
         base scmport-sbchar.c
         base encoding.h
         base encoding-config.h
         base encoding.c
         base global.h
         base global-aggregated.c
         core config-old.h
         core sigscheme.h
         core sigschemeinternal.h
         core storage-common.h
         core storage-fatty.h
         core storage-compact.h
         core storage.c
         core storage-gc.c
         core strcasecmp.c
         core alloc.c
         core error.c
         core env.c
         core symbol.c
yyyy yyy core continuation.c
yyyy yyy core eval.c
         core module.c
         core sigscheme.c
         semicore port.c
         semicore read.c
         semicore write.c
         semicore load.c
         semicore format.c
yyyy yyy r5rs syntax.c
yyyy yyy r5rs procedure.c
yyyy yyy r5rs number.c
yyyy yyy r5rs list.c
yyyy yyy r5rs deep-cadrs.c
         r5rs char.c
yyyy yyy r5rs string-core.c
         r5rs string.c
         r5rs vector.c
yyyy yyy r5rs qquote.c
         r5rs macro.c
         r5rs promise.c
         srfi module-srfi1.c
         srfi module-srfi2.c
         srfi module-srfi6.c
         srfi module-srfi8.c
         srfi module-srfi23.c
         srfi module-srfi28.c
         srfi module-srfi34.c
         srfi module-srfi38.c
         srfi module-srfi48.c
         srfi module-srfi60.c
         opt module-sscm-ext.c
         opt module-siod.c
         other main.c
         other sigscheme-combined.h
         other dllentry.c
----------------------------------------------------------------


Status
------

file:              scmint.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-config.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-null.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-null.c
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-file.c
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-file.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-str.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-str.c
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-basechar.c
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-mbchar.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-mbchar.c
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-sbchar.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              scmport-sbchar.c
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              encoding.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              encoding-config.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              encoding.c
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              global.h
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              global-aggregated.c
category:          base
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              config-old.h
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              sigscheme.h
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              sigschemeinternal.h
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              storage-common.h
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              storage-fatty.h
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              storage-compact.h
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              storage.c
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              storage-gc.c
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              strcasecmp.c
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              alloc.c
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              error.c
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              env.c
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              symbol.c
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              continuation.c
category:          core
spec by eyes:      yamaken@r3880
spec by tests:     yamaken@r3880
general review:    yamaken@r3880
64-bit by eyes:    yamaken@r3880
64-bit by tests:   
coding style:      yamaken@r3880
normal case tests: yamaken@r3880
corner case tests: yamaken@r3880

file:              eval.c
category:          core
spec by eyes:      yamaken@r3865
spec by tests:     yamaken@r3865
general review:    yamaken@r3865
64-bit by eyes:    yamaken@r3865
64-bit by tests:   
coding style:      yamaken@r3866
normal case tests: yamaken@r3865
corner case tests: yamaken@r3865

file:              module.c
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              sigscheme.c
category:          core
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              port.c
category:          semicore
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              read.c
category:          semicore
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              write.c
category:          semicore
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              load.c
category:          semicore
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              format.c
category:          semicore
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              syntax.c
category:          r5rs
spec by eyes:      yamaken@r3704
spec by tests:     yamaken@r3704
general review:    yamaken@r3704
64-bit by eyes:    yamaken@r3704
64-bit by tests:   
coding style:      yamaken@r3704
normal case tests: yamaken@r3704
corner case tests: yamaken@r3896

file:              procedure.c
category:          r5rs
spec by eyes:      yamaken@r3880
spec by tests:     yamaken@r3880
general review:    yamaken@r3880
64-bit by eyes:    yamaken@r3880
64-bit by tests:   
coding style:      yamaken@r3880
normal case tests: yamaken@r3880
corner case tests: yamaken@r3880

file:              number.c
category:          r5rs
spec by eyes:      yamaken@r3943
spec by tests:     yamaken@r3943
general review:    yamaken@r3943
64-bit by eyes:    yamaken@r3943
64-bit by tests:   
coding style:      yamaken@r3943
normal case tests: yamaken@r3943
corner case tests: yamaken@r3943

file:              list.c
category:          r5rs
spec by eyes:      yamaken@r3902
spec by tests:     yamaken@r3902
general review:    yamaken@r3902
64-bit by eyes:    yamaken@r3902
64-bit by tests:   
coding style:      yamaken@r3902
normal case tests: yamaken@r3902
corner case tests: yamaken@r3902

file:              deep-cadrs.c
category:          r5rs
spec by eyes:      yamaken@r3892
spec by tests:     yamaken@r3903
general review:    yamaken@r3892
64-bit by eyes:    yamaken@r3892
64-bit by tests:   
coding style:      yamaken@r3892
normal case tests: yamaken@r3903
corner case tests: yamaken@r3903

file:              char.c
category:          r5rs
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              string-core.c
category:          r5rs
spec by eyes:      yamaken@r3911
spec by tests:     yamaken@r3911
general review:    yamaken@r3911
64-bit by eyes:    yamaken@r3911
64-bit by tests:   
coding style:      yamaken@r3911
normal case tests: yamaken@r3911
corner case tests: yamaken@r3911

file:              string.c
category:          r5rs
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              vector.c
category:          r5rs
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              qquote.c
category:          r5rs
spec by eyes:      yamaken@r3649
spec by tests:     yamaken@r3649
general review:    yamaken@r3649
64-bit by eyes:    yamaken@r3649
64-bit by tests:   
coding style:      yamaken@r3649
normal case tests: yamaken@r3649
corner case tests: yamaken@r3649

file:              macro.c
category:          r5rs
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              promise.c
category:          r5rs
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi1.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi2.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi6.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi8.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi23.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi28.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi34.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi38.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi48.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-srfi60.c
category:          srfi
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-sscm-ext.c
category:          opt
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              module-siod.c
category:          opt
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              main.c
category:          other
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              sigscheme-combined.h
category:          other
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 

file:              dllentry.c
category:          other
spec by eyes:      
spec by tests:     
general review:    
64-bit by eyes:    
64-bit by tests:   
coding style:      
normal case tests: 
corner case tests: 


Log
---
2006-11-05  YamaKen <yamaken AT bp.iij4u.or.jp>

        * number.c
          - QA done @r3943 except for "64-bit by tests". And all required tests
            for 64-bit configuration itself are also written, but since both
            storage-compact and fatty produces SEGV when displaying an integer
            on LP64 env, debug needed
          - [R5RS] Fix broken result of 'modulo' on no-remainder cases
          - Fix missized-cast of 'quotient' which results a broken value on
            64-bit configurations
          - [R5RS] Reject invalid number strings such as "0xa" and " 1" on
            'string->number'
          - [R5RS] Reject invalid number literals such as "#x0xa"
          - (INT_LITERAL_LEN_MAX): Fix '0' prefix incapability on a
            maximum-length binary number literal. See "R5RS conformance:
            Numbers: Literals" subsection of doc/spec.txt for further details

          Details:
          - Add test-number-{arith,cmp,conv,literal,pred}.scm and complete all
            required tests for these procedures I'm aware of

          - Specs have been validated against following R5RS sections:
            * +, *, -, /, number?, integer?, =, <, <=, >, >=, zero?, positive?,
              negative?, odd?, even?, max, min, abs, quotient, modulo,
              remainder, number->string, string->number
              "6.2 Numbers"
              "6.2.1 Numerical types"
              "6.2.2 Exactness"
              "6.2.3 Implementation restrictions"
              "6.2.4 Syntax of numerical constants"
              "6.2.5 Numerical operations"
              "6.2.6 Numerical input and output"
              "7.1.1 Lexical structure"
          - Arithmetic behaviors and rounding specs for integers are validated
            against following ISO/IEC 9899:1999(E) standard:
            * /, quotient, remainder
              "6.3.1.4 Real floating and integer"
              "6.5.5 Multiplicative operators"

2006-10-09  YamaKen <yamaken AT bp.iij4u.or.jp>

        * string-core.c
          - QA done @r3911 except for "64-bit by tests"

          Details:
          - Complete all required tests for these procedures I'm aware of in
            test-string-core.scm
          - Specs have been validated against following R5RS sections:
            * string?, string-length, string=?, string-append, string-copy
              "6.3.5 Strings"

2006-10-03  YamaKen <yamaken AT bp.iij4u.or.jp>

        * list.c
          - QA done for 'append', 'reverse', 'list-tail', 'list-ref' @r3901
            except for "64-bit by tests". Rest parts of list.c is not validated
            yet
          - QA done for 'memq', 'memv', 'member', 'assq', 'assv', 'assoc'
            and all list.c @r3902 except for "64-bit by tests"
          - Fix broken improper tail handling of 'list-ref'
          - Fix improper list acceptance of 'reverse'

          Details:
          - Complete all required tests for these procedures I'm aware of in
            test-list.scm
          - Add test-member.scm and test-assoc.scm and complete all required
            tests I'm aware of
          - Specs have been validated against following R5RS sections:
            * append, reverse, list-tail, list-ref, memq, memv, member, assq,
              assv, assoc
              "6.3.2 Pairs and lists"

            Since the 'member' and 'assoc' procedures use eq?, eqv? and equal?
            that already validated before, "6.1 Equivalence predicates" is not
            checked again here

        * deep-cadr.c
          - QA done again for all c[ad]+r procedures @r3903 with fixed
            test-pair.scm

2006-10-02  YamaKen <yamaken AT bp.iij4u.or.jp>

        * list.c
        * sigscheme.h
        * sigschemeinternal.h
        * syntax.c
          - QA done for 'length' @r3896 except for "64-bit by tests". Rest
            parts of list.c is not validated yet
          - QA done for 'length'-related macros of sigscheme.h @r3896. Rest
            parts of sigscheme.h is not validated yet
          - QA done for 'length'-related macros of sigschemeinternal.h
            @r3897. Rest parts of sigschemeinternal.h is not validated yet
          - Fix infinite loop of 'quote' triggered by (error a-circular-list)

          Details:
          - Add tests for 'length' to test-list.scm and complete all required
            'length'-related tests I'm aware of
          - Add test-length.c and complete all required 'length'-related tests
            I'm aware of
          - (scm_s_quote): Fix infinite loop of SCM_UNWRAP_SYNTAX() by error
            objects that contain circular list
          - (scm_p_length): Fix passing circular list into error object when
            SRFI-38 is not enabled
          - Specs have been validated against following R5RS sections:
            * length
              "6.3.2 Pairs and lists"
              "Improper Lists" section of SRFI-1

        * sigscheme/src/sigschemeinternal.h
        * sigscheme/src/sigscheme.h
        * sigscheme/src/list.c
          - Definition of dotted list length is changed to SRFI-1's from
            SigScheme-speciific one @r3898. See svn log for further information

2006-09-30  YamaKen <yamaken AT bp.iij4u.or.jp>

        * list.c
          - QA done for null?, list? @r3893 except for "64-bit by tests". Rest
            parts of list.c is not validated yet

          Details:
          - Specs have been validated against following R5RS sections:
            * null?, list?
              "6.3.2 Pairs and lists"

        * test-bool.scm
          - Fix boolean? tests. Since the predicates must return exact #t if
            true as described in "6.3.1 Booleans" of R5RS, assert-true is
            insufficient
        * test-misc.scm
          - Likewise for procedure? with "6.4 Control features"
        * test-pair.scm
          - Likewise for pair? with "6.3.2 Pairs and lists"
        * test-symbol.scm
          Likewise for symbol? with "6.3.3 Symbols"
        * test-eq.scm
          Likewise for eq? with "6.1 Equivalence predicates"
        * test-eqv.scm
          Likewise for eq? with "6.1 Equivalence predicates"
        * test-equal.scm
          Likewise for eq? with "6.1 Equivalence predicates"

2006-09-27  YamaKen <yamaken AT bp.iij4u.or.jp>

        * list.c
        * deep-cadrs.c
          - QA done for pair?, cons, car, cdr, set-car!, set-cdr! and all
            c[ad]+r procedures @r3892 except for "64-bit by tests". Rest parts
            of list.c is not validated yet

          Details:
          - Add test-pair.scm (some tests that I wrote and R5RS examples are
            moved from test-list.scm) and complete all required tests I'm aware
            of
          - Specs have been validated against following R5RS sections:
            * pair?, cons, car, cdr, set-car!, set-cdr!, caar, cadr, cdar,
              cddr, caddr, cdddr, caaar, caadr, cadar, cdaar, cdadr, cddar,
              caaaar, caaadr, caadar, caaddr, cadaar, cadadr, caddar, cadddr,
              cdaaar, cdaadr, cdadar, cdaddr, cddaar, cddadr, cdddar, cddddr
              "3.3 External representations"
              "3.4 Storage model"
              "6.3.2 Pairs and lists"

2006-09-25  YamaKen <yamaken AT bp.iij4u.or.jp>

        * procedure.c
        * continuation.c
        * eval.c
          - QA done for call-with-current-continuation and dynamic-wind
            together with all parts of procedure.c and continuation.c @r3880
            except for "64-bit by tests"
          - [R5RS] Fix improper tail recursion of call-with-values on a corner
            case
          - [R5RS] Proper tail recursion conformance of 'eval' has been marked
            as 'uncertain'

          Details:
          - Add various tests to test-continuation.scm, test-dyn-extent.scm and
            test-tail-rec.scm and complete all required tests I'm aware of
          - All proper tail recursion conformance (including '=>' clause of
            'cond' and 'apply') are tested except for R5RS 'eval' and SRFI-34
            'guard'. See the comments of scm_p_eval() and rec-by-eval for
            further information about 'eval'
          - Specs have been validated against following R5RS sections:
            * call-with-current-continuation, dynamic-wind, call-with-values
              "3.5 Proper tail recursion"
              "6.4 Control features"

        * test/
          - Some test-*.scm have been renamed as follows. Take care of the
            renamings to dig into old logs

            * test-syntax.scm -> test-formal-syntax.scm
            * test-exp.scm    -> test-syntax.scm   (R5RS syntaxes)
            * test-exp.scm    -> test-obsolete.scm (obsolete tests)
            * test-map-2.scm  -> test-map.scm

2006-09-20  YamaKen <yamaken AT bp.iij4u.or.jp>

        * procedure.c
          - QA done for symbol?, symbol->string, string->symbol and general
            symbol comparisons @r3873. Rest parts of procedure.c is not
            validated yet
          - QA done for procedure? @r3874. Rest parts of procedure.c is not
            validated yet
          - QA done for map and for-each @r3875 and @r3876. Rest parts of
            procedure.c is not validated yet
          - QA done for values and call-with-values @r3877 except for proper
            tail-recursion test of call-with-values. Rest parts of procedure.c
            is not validated yet
          - [R5RS] Fix improper list acceptance on single-arg map

          Details:
          - Add uneven-length lists rejection (as error) on multiple-args
            map. Although such forms are not allowed by R5RS, causing the error
            is SigScheme-specific implementation
          - Add test-symbol.scm, test-misc.scm, test-map-2.scm and complete all
            required tests I'm aware of
          - Specs have been validated against following R5RS sections:
            * symbol?, symbol->string, string->symbol
              "2. Lexical conventions"
              "2.1 Identifiers"
              "4.1.2 Literal expressions"
              "6.3.3 Symbols"
              "7.1.1 Lexical structure"
            * procedure?, map, for-each
              "6.4 Control features"
            * values, call-with-values
              "3.5 Proper tail recursion"
              "4.1.3 Procedure calls"
              "6.4 Control features"

2006-09-07  YamaKen <yamaken AT bp.iij4u.or.jp>

        * procedure.c
          - QA done for 'not' and boolean? @r3869. Rest parts of procedure.c is
            not validated yet

          Details:
          - Add test-bool.scm and complete all required tests I'm aware of
          - Specs have been validated against following R5RS sections:
            * not, boolean?
              "6.3.1 Booleans"

2006-09-05  YamaKen <yamaken AT bp.iij4u.or.jp>

        * procedure.c
          - QA done for eq?, eqv? and equal? @r3868 except for "64-bit by
            tests" and hygienic macros capability. Other parts of procedure.c
            is not validated yet

          Details:
          - Fix a critical bug of 'scm_type' of storage-compact
          - Deprecate test-equation.scm since R5RS specification is not
            reflected well, and test cases are considerably insufficient
          - Add test-{eq,eqv,equal}.scm and complete all required tests I'm
            aware of
          - Specs have been validated against following R5RS sections:
            * eq?, eqv?, equal?
              "6.1 Equivalence predicates"
              "2. Lexical conventions"
              "2.1 Identifiers"

2006-09-02  YamaKen <yamaken AT bp.iij4u.or.jp>

        * eval.c
          - QA done @r3865 and @r3866 except for "64-bit by tests" and
            hygienic macros capability

          Details:
          - Fix a critical bug of 'call' appears on a minor build
            configuration
          - Add tests for 'eval' returns multiple values,
            scheme-report-environment and null-environment to test-eval.scm
          - Add tests for 'apply' invalid forms, single-argument,
            multi-aruguments and returns multiple values to test-apply.scm
          - Specs have been validated against following R5RS sections:
            * apply
              "4.1.3 Procedure calls"
              "6.4 Control features"
            * eval
              "4.1.1 Variable references"
              "4.1.2 Literal expressions"
              "4.1.3 Procedure calls"
              "4.1.4 Procedures"
              "6.4 Control features" (continuation, multiple values)
              "6.5 Eval"
            * interaction-environment
              "6.5 Eval"

          - Specs have been validated against following R5RS sections, but not
            conformed yet although tests are written for the future:
            * scheme-report-environment
              "6.5 Eval"
            * null-environment
              "6.5 Eval"

2006-07-08 YamaKen <yamaken AT bp.iij4u.or.jp>

        * syntax.c
          - QA done @r3704 except for "64-bit by tests" and hygienic macros
            capability and proper tail recursion capability of '=>' form of
            'cond'
          - [R5RS] Fix invalid acceptance of definition form on where neither
            toplevel nor internal definition is allowed
          - [R5RS] Fix invalid acceptance of 'begin' that contains definitions
            and expressions intermixed
          - [R5RS] Fix invalid acceptance of <body> that contains definitions
            and expressions intermixed on 'let', 'let*', 'letrec' and function
            form 'define'
          - [R5RS] Fix invalid no-expressions <body> acceptance of 'let',
            'let*', 'letrec' and function form 'define'
          - [R5RS] Fix invalid acceptance of binding syntactic keyword as value
            on 'define', 'let', 'let*', 'letrec' and 'do'
          - Add optional duplicate variable check to 'let', 'let*', 'letrec'
            and 'do' (it is not required by R5RS)
          - [R5RS] Fix broken per-iteration env isolation of 'do'
          - [R5RS] Fix proper tail recursion incapability of '=>' form of
            'cond'
          - [R5RS] Fix invalid acceptance of cond-like '=>' form of 'case'
            which is not defined in R5RS
          - [R5RS] Remove 'delay' and 'force' since they are completely broken

          Details:
          - Accept '(begin)' as valid internal and toplevel definition as
            defined in "7.1.6 Programs and definitions" of R5RS, and reject as
            expression as defined in "7.1.3 Expressions". This behavior is
            strictly conforms to R5RS and same as Scheme48 1.3. (i.e. '(begin)'
            is valid only at where definitions are allowed)
          - Remove broken internal definition on
            !SCM_STRICT_DEFINE_PLACEMENT. Since it breaks the R5RS internal
            definitions semantics, the macro is replaced with
            SCM_USE_INTERNAL_DEFINITIONS and the feature is made exclusively
            selectable from only 'completely valid' or 'disabled'. The broken
            internal definitions have been withdrawn
          - I found that 'delay' implementation is completely misunderstood and
            broken. So the implementation of 'delay' and 'force' are rewritten
            as "not implemented yet" error generator and separated into
            a placeholder file promise.c
          - Add test-let.scm, test-lambda.scm, test-begin.scm,
            test-define-internal.scm, test-do.scm and complete all required
            tests I'm aware of
          - Add and fix various tests to test-exp.scm, test-syntax.scm and
            test-define.scm
          - Specs have been validated against following R5RS sections:
            * quote
              "3.3 External representations"
              "4.1.2 Literal expressions"
              "7.1.3 Expressions"
            * lambda
              "4.1.4 Procedures"
              "7.1.3 Expressions"
              "5.2.2 Internal definitions"
              "7.1.6 Programs and definitions"
            * if
              "4.1.5 Conditionals"
              "7.1.3 Expressions"
            * set!
              "4.1.6 Assignments"
              "7.1.3 Expressions"
            * cond, case, and, or
              "3.5 Proper tail recursion"
              "4.2.1 Conditionals"
              "7.1.3 Expressions"
            * let, named lfet, let*, letrec
              "4.2.2 Binding constructs"
              "4.2.4 Iteration"
              "5.2.2 Internal definitions"
              "7.1.3 Expressions"
              "7.1.6 Programs and definitions"
            * begin
              "4.2.3 Sequencing"
              "5.2.2 Internal definitions"
              "7.1.3 Expressions"
              "7.1.6 Programs and definitions"
            * do
              "4.2.4 Iteration"
              "7.1.3 Expressions"
            * define
              "3.1 Variables; syntactic keywords; and regions"
              "4.1.1 Variable references"
              "4.2.3 Sequencing"
              "4.3 Macros"
              "5.1 Programs"
              "5.2 Definitions"
              "5.2.1 Top level definitions"
              "5.2.2 Internal definitions"
              "7.1.1 Lexical structure"
              "7.1.3 Expressions"
              "7.1.6 Programs and definitions"

2006-06-25 YamaKen <yamaken AT bp.iij4u.or.jp>

        * qquote.c
          - QA done @r3649 except for "64-bit by tests"
          - Specs have been validated against R5RS "4.2.6 Quasiquotation" and
            "7.1.4 Quasiquotations"
          - Fix some bugs including a destructive one
          - An unquote-splicing behavior is different to some other
            implementations, but I believe that this implementation is
            proper. See "unquote-splicing nested" of test-quote.scm

2006-06-24 YamaKen <yamaken AT bp.iij4u.or.jp>

        * Create this file and define record formats.
