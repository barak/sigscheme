;;  Filename : test-let.scm
;;  About    : unit test for R5RS let, named let, let*, letrec
;;
;;  Copyright (C) 2005-2006 YAMAMOTO Kengo <yamaken AT bp.iij4u.or.jp>
;;
;;  All rights reserved.
;;
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions
;;  are met:
;;
;;  1. Redistributions of source code must retain the above copyright
;;     notice, this list of conditions and the following disclaimer.
;;  2. Redistributions in binary form must reproduce the above copyright
;;     notice, this list of conditions and the following disclaimer in the
;;     documentation and/or other materials provided with the distribution.
;;  3. Neither the name of authors nor the names of its contributors
;;     may be used to endorse or promote products derived from this software
;;     without specific prior written permission.
;;
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
;;  IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;;  PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
;;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(load "./test/unittest.scm")

(define *test-track-progress* #f)
(define tn test-name)


;;
;; let
;;
(tn "let invalid form")
;; bindings and body required
(assert-error  (tn) (lambda ()
                      (let)))
(assert-error  (tn) (lambda ()
                      (let ())))
(assert-error  (tn) (lambda ()
                      (let ((a)))))
(assert-error  (tn) (lambda ()
                      (let ((a 1)))))
(assert-error  (tn) (lambda ()
                      (let (a 1))))
(assert-error  (tn) (lambda ()
                      (let a)))
(assert-error  (tn) (lambda ()
                      (let #())))
(assert-error  (tn) (lambda ()
                      (let #f)))
(assert-error  (tn) (lambda ()
                      (let #t)))
;; bindings must be a list
(assert-error  (tn) (lambda ()
                      (let a 'val)))
(if (provided? "siod-bugs")
    (assert-equal? (tn)
                   'val
                   (let #f 'val))
    (assert-error  (tn) (lambda ()
                          (let #f 'val))))
(assert-error  (tn) (lambda ()
                      (let #() 'val)))
(assert-error  (tn) (lambda ()
                      (let #t 'val)))
;; each binding must be a 2-elem list
(assert-error  (tn) (lambda ()
                      (let (a 1) 'val)))
(if (provided? "siod-bugs")
    (assert-equal? (tn)
                   'val
                   (let ((a)) 'val))
    (assert-error  (tn)
                   (lambda ()
                     (let ((a)) 'val))))
(assert-error  (tn)
               (lambda ()
                 (let ((a 1 'excessive)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (let ((a 1) . (b 2)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (let ((a . 1)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (let ((a  1)) . a)))
(assert-error  (tn)
               (lambda ()
                 (let ((a  1)) 'val . a)))
(assert-error  (tn)
               (lambda ()
                 (let (1) #t)))

(tn "let env isolation")
(assert-error  (tn)
               (lambda ()
                 (let ((var1 1)
                       (var2 var1))
                   'result)))
(assert-error  (tn)
               (lambda ()
                 (let ((var1 var2)
                       (var2 2))
                   'result)))
(assert-error  (tn)
               (lambda ()
                 (let ((var1 var2)
                       (var2 var1))
                   'result)))
(assert-equal? (tn)
               '(#f #f #f)
               (let ((var1 (symbol-bound? 'var1))
                     (var2 (symbol-bound? 'var1))
                     (var3 (symbol-bound? 'var1)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(#f #f #f)
               (let ((var1 (symbol-bound? 'var2))
                     (var2 (symbol-bound? 'var2))
                     (var3 (symbol-bound? 'var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(#f #f #f)
               (let ((var1 (symbol-bound? 'var3))
                     (var2 (symbol-bound? 'var3))
                     (var3 (symbol-bound? 'var3)))
                 (list var1 var2 var3)))

(tn "let internal definitions lacking sequence part")
;; at least one <expression> is required
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (define var1 1))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (define (proc1) 1))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (define var1 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (define (proc1) 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (define var1 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (define (proc1) 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define var1 1)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define var1 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)))))
;; appending a non-definition expression into a begin block is invalid
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define var1 1)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define var1 1)
                     (define var2 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val))))

(tn "let internal definitions cross reference")
;; R5RS: 5.2.2 Internal definitions
;; Just as for the equivalent `letrec' expression, it must be possible to
;; evaluate each <expression> of every internal definition in a <body> without
;; assigning or referring to the value of any <variable> being defined.
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (define var1 1)
                   (define var2 var1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (define var1 var2)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (define var1 var1)
                   'val)))
(assert-equal? (tn)
               '(0 0 0 0 0)
               (let ((var0 0))
                 (define var1 var0)
                 (define var2 var0)
                 (begin
                   (define var3 var0)
                   (begin
                     (define var4 var0)))
                 (define var5 var0)
                 (list var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let ((var0 (symbol-bound? 'var1)))
                 (define var1 (symbol-bound? 'var1))
                 (define var2 (symbol-bound? 'var1))
                 (begin
                   (define var3 (symbol-bound? 'var1))
                   (begin
                     (define var4 (symbol-bound? 'var1))))
                 (define var5 (symbol-bound? 'var1))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let ((var0 (symbol-bound? 'var2)))
                 (define var1 (symbol-bound? 'var2))
                 (define var2 (symbol-bound? 'var2))
                 (begin
                   (define var3 (symbol-bound? 'var2))
                   (begin
                     (define var4 (symbol-bound? 'var2))))
                 (define var5 (symbol-bound? 'var2))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let ((var0 (symbol-bound? 'var3)))
                 (define var1 (symbol-bound? 'var3))
                 (define var2 (symbol-bound? 'var3))
                 (begin
                   (define var3 (symbol-bound? 'var3))
                   (begin
                     (define var4 (symbol-bound? 'var3))))
                 (define var5 (symbol-bound? 'var3))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let ((var0 (symbol-bound? 'var4)))
                 (define var1 (symbol-bound? 'var4))
                 (define var2 (symbol-bound? 'var4))
                 (begin
                   (define var3 (symbol-bound? 'var4))
                   (begin
                     (define var4 (symbol-bound? 'var4))))
                 (define var5 (symbol-bound? 'var4))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let ((var0 (symbol-bound? 'var5)))
                 (define var1 (symbol-bound? 'var5))
                 (define var2 (symbol-bound? 'var5))
                 (begin
                   (define var3 (symbol-bound? 'var5))
                   (begin
                     (define var4 (symbol-bound? 'var5))))
                 (define var5 (symbol-bound? 'var5))
                 (list var0 var1 var2 var3 var4 var5)))
;; outer let cannot refer internal variable
(assert-error  (tn)
               (lambda ()
                 (let ((var0 (lambda () var1)))
                   (define var1 (lambda () 1))
                   (eq? (var0) var0))))
;; defining procedure can refer other (and self) variables as if letrec
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let ((var0 (lambda () 0)))
                 (define var1 (lambda () var0))
                 (define var2 (lambda () var0))
                 (begin
                   (define var3 (lambda () var0))
                   (begin
                     (define var4 (lambda () var0))))
                 (define var5 (lambda () var0))
                 (list (eq? (var1) var0)
                       (eq? (var2) var0)
                       (eq? (var3) var0)
                       (eq? (var4) var0)
                       (eq? (var5) var0))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let ()
                 (define var1 (lambda () var1))
                 (define var2 (lambda () var1))
                 (begin
                   (define var3 (lambda () var1))
                   (begin
                     (define var4 (lambda () var1))))
                 (define var5 (lambda () var1))
                 (list (eq? (var1) var1)
                       (eq? (var2) var1)
                       (eq? (var3) var1)
                       (eq? (var4) var1)
                       (eq? (var5) var1))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let ()
                 (define var1 (lambda () var2))
                 (define var2 (lambda () var2))
                 (begin
                   (define var3 (lambda () var2))
                   (begin
                     (define var4 (lambda () var2))))
                 (define var5 (lambda () var2))
                 (list (eq? (var1) var2)
                       (eq? (var2) var2)
                       (eq? (var3) var2)
                       (eq? (var4) var2)
                       (eq? (var5) var2))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let ()
                 (define var1 (lambda () var3))
                 (define var2 (lambda () var3))
                 (begin
                   (define var3 (lambda () var3))
                   (begin
                     (define var4 (lambda () var3))))
                 (define var5 (lambda () var3))
                 (list (eq? (var1) var3)
                       (eq? (var2) var3)
                       (eq? (var3) var3)
                       (eq? (var4) var3)
                       (eq? (var5) var3))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let ()
                 (define var1 (lambda () var4))
                 (define var2 (lambda () var4))
                 (begin
                   (define var3 (lambda () var4))
                   (begin
                     (define var4 (lambda () var4))))
                 (define var5 (lambda () var4))
                 (list (eq? (var1) var4)
                       (eq? (var2) var4)
                       (eq? (var3) var4)
                       (eq? (var4) var4)
                       (eq? (var5) var4))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let ()
                 (define var1 (lambda () var5))
                 (define var2 (lambda () var5))
                 (begin
                   (define var3 (lambda () var5))
                   (begin
                     (define var4 (lambda () var5))))
                 (define var5 (lambda () var5))
                 (list (eq? (var1) var5)
                       (eq? (var2) var5)
                       (eq? (var3) var5)
                       (eq? (var4) var5)
                       (eq? (var5) var5))))

(tn "let internal definitions valid forms")
;; valid internal definitions
(assert-equal? (tn)
               '(1)
               (let ()
                 (define var1 1)
                 (list var1)))
(assert-equal? (tn)
               '(1)
               (let ()
                 (define (proc1) 1)
                 (list (proc1))))
(assert-equal? (tn)
               '(1 2)
               (let ()
                 (define var1 1)
                 (define var2 2)
                 (list var1 var2)))
(assert-equal? (tn)
               '(1 2)
               (let ()
                 (define (proc1) 1)
                 (define (proc2) 2)
                 (list (proc1) (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let ()
                 (define var1 1)
                 (define (proc2) 2)
                 (list var1 (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let ()
                 (define (proc1) 1)
                 (define var2 2)
                 (list (proc1) var2)))
;; SigScheme accepts '(begin)' as valid internal definition '(begin
;; <definition>*)' as defined in "7.1.6 Programs and definitions" of R5RS
;; although it is rejected as expression '(begin <sequence>)' as defined in
;; "7.1.3 Expressions".
(assert-equal? (tn)
               1
               (let ()
                 (begin)
                 1))
(assert-equal? (tn)
               1
               (let ()
                 (begin)
                 (define var1 1)
                 (begin)
                 1))
(assert-equal? (tn)
               '(1)
               (let ()
                 (begin
                   (define var1 1))
                 (list var1)))
(assert-equal? (tn)
               '(1)
               (let ()
                 (begin
                   (define (proc1) 1))
                 (list (proc1))))
(assert-equal? (tn)
               '(1 2)
               (let ()
                 (begin
                   (define var1 1)
                   (define var2 2))
                 (list var1 var2)))
(assert-equal? (tn)
               '(1 2)
               (let ()
                 (begin
                   (define (proc1) 1)
                   (define (proc2) 2))
                 (list (proc1) (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let ()
                 (begin
                   (define var1 1)
                   (define (proc2) 2))
                 (list var1 (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let ()
                 (begin
                   (define (proc1) 1)
                   (define var2 2))
                 (list (proc1) var2)))
(assert-equal? (tn)
               '(1 2 3 4 5 6)
               (let ()
                 (begin
                   (define (proc1) 1)
                   (define var2 2)
                   (begin
                     (define (proc3) 3)
                     (define var4 4)
                     (begin
                       (define (proc5) 5)
                       (define var6 6))))
                 (list (proc1) var2
                       (proc3) var4
                       (proc5) var6)))
;; begin block and single definition mixed
(assert-equal? (tn)
               '(1 2 3 4 5 6)
               (let ()
                 (begin)
                 (define (proc1) 1)
                 (begin
                   (define var2 2)
                   (begin
                     (define (proc3) 3)
                     (begin)
                     (define var4 4)))
                 (begin)
                 (define (proc5) 5)
                 (begin
                   (begin
                     (begin
                       (begin)))
                   (define var6 6)
                   (begin))
                 (begin)
                 (list (proc1) var2
                       (proc3) var4
                       (proc5) var6)))

(tn "let internal definitions invalid begin blocks")
;; appending a non-definition expression into a begin block is invalid
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define var1 1)
                     'val)
                   (list var1))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     'val)
                   (list (proc1)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define var1 1)
                     (define var2 2)
                     'val)
                   (list var1 var2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)
                     'val)
                   (list (proc1) (proc2)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)
                     'val)
                   (list var1 (proc2)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val)
                   (list (proc1) var2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)
                         'val)))
                   (list (proc1) var2
                         (proc3) var4
                         (proc5) var6))))

(tn "let internal definitions invalid placement")
;; a non-definition expression prior to internal definition is invalid
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define var1 1))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define (proc1) 1))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define var1 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define (proc1) 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define var1 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define (proc1) 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define var1 1)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define (proc1) 1)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define var1 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define var1 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)))))))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)))))))
;; a non-definition expression prior to internal definition is invalid even if
;; expression(s) is following the internal definition
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define var1 1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define (proc1) 1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define var1 1)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define (proc1) 1)
                   (define (proc2) 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define var1 1)
                   (define (proc2) 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (define (proc1) 1)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define var1 1))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define (proc1) 1))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define var1 1)
                     (define var2 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define var1 1)
                     (define (proc2) 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6))))
                   (list (proc1) var2
                         (proc3) var4
                         (proc5) var6))))


(tn "let binding syntactic keywords")
(assert-error  (tn)
               (lambda ()
                 (let ((syn define))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn if))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn and))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn cond))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn begin))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn do))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn delay))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn let*))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn else))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn =>))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn quote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn quasiquote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn unquote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let ((syn unquote-splicing))
                   #t)))


(tn "let")
;; empty bindings is allowed by the formal syntax spec
(assert-equal? (tn)
               'result
               (let () 'result))
;; duplicate variable name
(assert-error  (tn)
               (lambda ()
                 (let ((var1 1)
                       (var1 2))
                   'result)))
;; masked variable name
(assert-equal? (tn)
               '(4 5 3)
               (let ((var1 1)
                     (var2 2)
                     (var3 3))
                 (let ((var1 4)
                       (var2 5))
                   (list var1 var2 var3))))
(assert-equal? (tn)
               '(1 2 3)
               (let ((var1 1)
                     (var2 2)
                     (var3 3))
                 (let ((var1 4)
                       (var2 5))
                   'dummy)
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 9)
               (let ((var1 1)
                     (var2 2)
                     (var3 3))
                 (let ((var1 4)
                       (var2 5))
                   (set! var3 (+ var1 var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 30)
               (let ((var1 1)
                     (var2 2)
                     (var3 3))
                 (let ((var1 4)
                       (var2 5))
                   (set! var1 10)
                   (set! var2 20)
                   (set! var3 (+ var1 var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 3 (10 20))
               (let ((var1 1)
                     (var2 2)
                     (var3 3)
                     (var4 (let ((var1 4)
                                     (var2 5))
                                 (set! var1 10)
                                 (set! var2 20)
                                 (list var1 var2))))
                 (list var1 var2 var3 var4)))
(assert-error  (tn)
               (lambda ()
                 (let ((var1 1)
                       (var2 2)
                       (var3 3)
                       (var4 (let ((var1 4)
                                       (var2 5))
                                   (set! var3 10))))
                   (list var1 var2 var3 var4))))
;; normal case(s)
(assert-equal? (tn)
               12
               (let ((var1 5)
                     (var2 3))
                 (set! var1 (+ var2 1))
                 (* var1 var2)))
;; evaled value
(assert-equal? (tn)
               '(3 7)
               (let ((var1 (+ 1 2))
                     (var2 (+ 3 4)))
                 (list var1 var2)))

(tn "let lexical scope")
(define count-let
  (let ((count-let 0))  ;; intentionally same name
    (lambda ()
      (set! count-let (+ count-let 1))
      count-let)))
(assert-true   (tn) (procedure? count-let))
(assert-equal? (tn) 1 (count-let))
(assert-equal? (tn) 2 (count-let))
(assert-equal? (tn) 3 (count-let))


;;
;; named let
;;
(tn "named let invalid form")
;; bindings and body required
(assert-error  (tn) (lambda ()
                      (let loop)))
(assert-error  (tn) (lambda ()
                      (let loop ())))
(assert-error  (tn) (lambda ()
                      (let loop ((a)))))
(assert-error  (tn) (lambda ()
                      (let loop ((a 1)))))
(assert-error  (tn) (lambda ()
                      (let loop (a 1))))
(assert-error  (tn) (lambda ()
                      (let loop a)))
(assert-error  (tn) (lambda ()
                      (let loop #())))
(assert-error  (tn) (lambda ()
                      (let loop #f)))
(assert-error  (tn) (lambda ()
                      (let loop #t)))
;; bindings must be a list
(assert-error  (tn) (lambda ()
                      (let loop a 'val)))
(if (provided? "siod-bugs")
    (assert-equal? (tn)
                   'val
                   (let loop #f 'val))
    (assert-error  (tn) (lambda ()
                          (let loop #f 'val))))
(assert-error  (tn) (lambda ()
                      (let loop #() 'val)))
(assert-error  (tn) (lambda ()
                      (let loop #t 'val)))
;; each binding must be a 2-elem list
(assert-error  (tn) (lambda ()
                      (let loop (a 1))))
(if (provided? "siod-bugs")
    (assert-equal? (tn)
                   'val
                   (let loop ((a)) 'val))
    (assert-error  (tn)
                   (lambda ()
                     (let loop ((a)) 'val))))
(assert-error  (tn)
               (lambda ()
                 (let loop ((a 1 'excessive)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((a 1) . (b 2)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((a . 1)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((a  1)) . a)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((a  1)) 'val . a)))
(assert-error  (tn)
               (lambda ()
                 (let loop (1) #t)))

(tn "named let env isolation")
(assert-error  (tn)
               (lambda ()
                 (let loop ((var1 1)
                            (var2 var1))
                   'result)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((var1 var2)
                            (var2 2))
                   'result)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((var1 var2)
                            (var2 var1))
                   'result)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((var1 1)
                            (var2 loop))
                   'result)))
;; 'loop' is not bound at outer env
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'result)
                 (loop)))
(assert-equal? (tn)
               '(#f #f #f)
               (let loop ((var1 (symbol-bound? 'loop))
                          (var2 (symbol-bound? 'loop))
                          (var3 (symbol-bound? 'loop)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(#f #f #f)
               (let loop ((var1 (symbol-bound? 'var1))
                          (var2 (symbol-bound? 'var1))
                          (var3 (symbol-bound? 'var1)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(#f #f #f)
               (let loop ((var1 (symbol-bound? 'var2))
                          (var2 (symbol-bound? 'var2))
                          (var3 (symbol-bound? 'var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(#f #f #f)
               (let loop ((var1 (symbol-bound? 'var3))
                          (var2 (symbol-bound? 'var3))
                          (var3 (symbol-bound? 'var3)))
                 (list var1 var2 var3)))

(tn "named let internal definitions lacking sequence part")
;; at least one <expression> is required
(assert-error  (tn)
               (lambda ()
                 (let loop  ()
                   (define var1 1))))
(assert-error  (tn)
               (lambda ()
                 (let loop  ()
                   (define (proc1) 1))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (define var1 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (define (proc1) 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (define var1 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (define (proc1) 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define var1 1)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define var1 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)))))
;; appending a non-definition expression into a begin block is invalid
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define var1 1)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define var1 1)
                     (define var2 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val))))

(tn "named let internal definitions cross reference")
;; R5RS: 5.2.2 Internal definitions
;; Just as for the equivalent `letrec' expression, it must be possible to
;; evaluate each <expression> of every internal definition in a <body> without
;; assigning or referring to the value of any <variable> being defined.
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (define var1 1)
                   (define var2 var1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (define var1 var2)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (define var1 var1)
                   'val)))
(assert-equal? (tn)
               '(0 0 0 0 0)
               (let loop ((var0 0))
                 (define var1 var0)
                 (define var2 var0)
                 (begin
                   (define var3 var0)
                   (begin
                     (define var4 var0)))
                 (define var5 var0)
                 (list var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let loop ((var0 (symbol-bound? 'var1)))
                 (define var1 (symbol-bound? 'var1))
                 (define var2 (symbol-bound? 'var1))
                 (begin
                   (define var3 (symbol-bound? 'var1))
                   (begin
                     (define var4 (symbol-bound? 'var1))))
                 (define var5 (symbol-bound? 'var1))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let loop ((var0 (symbol-bound? 'var2)))
                 (define var1 (symbol-bound? 'var2))
                 (define var2 (symbol-bound? 'var2))
                 (begin
                   (define var3 (symbol-bound? 'var2))
                   (begin
                     (define var4 (symbol-bound? 'var2))))
                 (define var5 (symbol-bound? 'var2))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let loop ((var0 (symbol-bound? 'var3)))
                 (define var1 (symbol-bound? 'var3))
                 (define var2 (symbol-bound? 'var3))
                 (begin
                   (define var3 (symbol-bound? 'var3))
                   (begin
                     (define var4 (symbol-bound? 'var3))))
                 (define var5 (symbol-bound? 'var3))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let loop ((var0 (symbol-bound? 'var4)))
                 (define var1 (symbol-bound? 'var4))
                 (define var2 (symbol-bound? 'var4))
                 (begin
                   (define var3 (symbol-bound? 'var4))
                   (begin
                     (define var4 (symbol-bound? 'var4))))
                 (define var5 (symbol-bound? 'var4))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let loop ((var0 (symbol-bound? 'var5)))
                 (define var1 (symbol-bound? 'var5))
                 (define var2 (symbol-bound? 'var5))
                 (begin
                   (define var3 (symbol-bound? 'var5))
                   (begin
                     (define var4 (symbol-bound? 'var5))))
                 (define var5 (symbol-bound? 'var5))
                 (list var0 var1 var2 var3 var4 var5)))
;; outer let cannot refer internal variable
(assert-error  (tn)
               (lambda ()
                 (let loop ((var0 (lambda () var1)))
                   (define var1 (lambda () 1))
                   (eq? (var0) var0))))
;; defining procedure can refer other (and self) variables as if letrec
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let loop ((var0 (lambda () 0)))
                 (define var1 (lambda () var0))
                 (define var2 (lambda () var0))
                 (begin
                   (define var3 (lambda () var0))
                   (begin
                     (define var4 (lambda () var0))))
                 (define var5 (lambda () var0))
                 (list (eq? (var1) var0)
                       (eq? (var2) var0)
                       (eq? (var3) var0)
                       (eq? (var4) var0)
                       (eq? (var5) var0))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let loop ()
                 (define var1 (lambda () var1))
                 (define var2 (lambda () var1))
                 (begin
                   (define var3 (lambda () var1))
                   (begin
                     (define var4 (lambda () var1))))
                 (define var5 (lambda () var1))
                 (list (eq? (var1) var1)
                       (eq? (var2) var1)
                       (eq? (var3) var1)
                       (eq? (var4) var1)
                       (eq? (var5) var1))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let loop ()
                 (define var1 (lambda () var2))
                 (define var2 (lambda () var2))
                 (begin
                   (define var3 (lambda () var2))
                   (begin
                     (define var4 (lambda () var2))))
                 (define var5 (lambda () var2))
                 (list (eq? (var1) var2)
                       (eq? (var2) var2)
                       (eq? (var3) var2)
                       (eq? (var4) var2)
                       (eq? (var5) var2))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let loop ()
                 (define var1 (lambda () var3))
                 (define var2 (lambda () var3))
                 (begin
                   (define var3 (lambda () var3))
                   (begin
                     (define var4 (lambda () var3))))
                 (define var5 (lambda () var3))
                 (list (eq? (var1) var3)
                       (eq? (var2) var3)
                       (eq? (var3) var3)
                       (eq? (var4) var3)
                       (eq? (var5) var3))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let loop ()
                 (define var1 (lambda () var4))
                 (define var2 (lambda () var4))
                 (begin
                   (define var3 (lambda () var4))
                   (begin
                     (define var4 (lambda () var4))))
                 (define var5 (lambda () var4))
                 (list (eq? (var1) var4)
                       (eq? (var2) var4)
                       (eq? (var3) var4)
                       (eq? (var4) var4)
                       (eq? (var5) var4))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let loop ()
                 (define var1 (lambda () var5))
                 (define var2 (lambda () var5))
                 (begin
                   (define var3 (lambda () var5))
                   (begin
                     (define var4 (lambda () var5))))
                 (define var5 (lambda () var5))
                 (list (eq? (var1) var5)
                       (eq? (var2) var5)
                       (eq? (var3) var5)
                       (eq? (var4) var5)
                       (eq? (var5) var5))))

(tn "named let internal definitions valid forms")
;; valid internal definitions
(assert-equal? (tn)
               '(1)
               (let loop ()
                 (define var1 1)
                 (list var1)))
(assert-equal? (tn)
               '(1)
               (let loop ()
                 (define (proc1) 1)
                 (list (proc1))))
(assert-equal? (tn)
               '(1 2)
               (let loop ()
                 (define var1 1)
                 (define var2 2)
                 (list var1 var2)))
(assert-equal? (tn)
               '(1 2)
               (let loop ()
                 (define (proc1) 1)
                 (define (proc2) 2)
                 (list (proc1) (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let loop ()
                 (define var1 1)
                 (define (proc2) 2)
                 (list var1 (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let loop ()
                 (define (proc1) 1)
                 (define var2 2)
                 (list (proc1) var2)))
;; SigScheme accepts '(begin)' as valid internal definition '(begin
;; <definition>*)' as defined in "7.1.6 Programs and definitions" of R5RS
;; although it is rejected as expression '(begin <sequence>)' as defined in
;; "7.1.3 Expressions".
(assert-equal? (tn)
               1
               (let loop ()
                 (begin)
                 1))
(assert-equal? (tn)
               1
               (let loop ()
                 (begin)
                 (define var1 1)
                 (begin)
                 1))
(assert-equal? (tn)
               '(1)
               (let loop ()
                 (begin
                   (define var1 1))
                 (list var1)))
(assert-equal? (tn)
               '(1)
               (let loop ()
                 (begin
                   (define (proc1) 1))
                 (list (proc1))))
(assert-equal? (tn)
               '(1 2)
               (let loop ()
                 (begin
                   (define var1 1)
                   (define var2 2))
                 (list var1 var2)))
(assert-equal? (tn)
               '(1 2)
               (let loop ()
                 (begin
                   (define (proc1) 1)
                   (define (proc2) 2))
                 (list (proc1) (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let loop ()
                 (begin
                   (define var1 1)
                   (define (proc2) 2))
                 (list var1 (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let loop ()
                 (begin
                   (define (proc1) 1)
                   (define var2 2))
                 (list (proc1) var2)))
(assert-equal? (tn)
               '(1 2 3 4 5 6)
               (let loop ()
                 (begin
                   (define (proc1) 1)
                   (define var2 2)
                   (begin
                     (define (proc3) 3)
                     (define var4 4)
                     (begin
                       (define (proc5) 5)
                       (define var6 6))))
                 (list (proc1) var2
                       (proc3) var4
                       (proc5) var6)))
;; begin block and single definition mixed
(assert-equal? (tn)
               '(1 2 3 4 5 6)
               (let loop ()
                 (begin)
                 (define (proc1) 1)
                 (begin
                   (define var2 2)
                   (begin
                     (define (proc3) 3)
                     (begin)
                     (define var4 4)))
                 (begin)
                 (define (proc5) 5)
                 (begin
                   (begin
                     (begin
                       (begin)))
                   (define var6 6)
                   (begin))
                 (begin)
                 (list (proc1) var2
                       (proc3) var4
                       (proc5) var6)))

(tn "named let internal definitions invalid begin blocks")
;; appending a non-definition expression into a begin block is invalid
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define var1 1)
                     'val)
                   (list var1))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     'val)
                   (list (proc1)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define var1 1)
                     (define var2 2)
                     'val)
                   (list var1 var2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)
                     'val)
                   (list (proc1) (proc2)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)
                     'val)
                   (list var1 (proc2)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val)
                   (list (proc1) var2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)
                         'val)))
                   (list (proc1) var2
                         (proc3) var4
                         (proc5) var6))))

(tn "named let internal definitions invalid placement")
;; a non-definition expression prior to internal definition is invalid
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define var1 1))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define (proc1) 1))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define var1 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define (proc1) 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define var1 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define (proc1) 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define var1 1)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define (proc1) 1)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define var1 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define var1 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)))))))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)))))))
;; a non-definition expression prior to internal definition is invalid even if
;; expression(s) is following the internal definition
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define var1 1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define (proc1) 1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define var1 1)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define (proc1) 1)
                   (define (proc2) 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define var1 1)
                   (define (proc2) 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (define (proc1) 1)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define var1 1))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define (proc1) 1))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define var1 1)
                     (define var2 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define var1 1)
                     (define (proc2) 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let loop ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6))))
                   (list (proc1) var2
                         (proc3) var4
                         (proc5) var6))))

(tn "named let binding syntactic keywords")
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn define))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn if))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn and))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn cond))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn begin))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn do))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn delay))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn let*))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn else))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn =>))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn quote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn quasiquote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn unquote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let loop ((syn unquote-splicing))
                   #t)))


(tn "named let")
;; empty bindings is allowed by the formal syntax spec
(assert-equal? (tn)
               'yes
               (let loop ()
                 (if (procedure? loop) 'yes 'no)))
;; duplicate variable name
(assert-error  (tn)
               (lambda ()
                 (let loop ((var1 1)
                            (var1 2))
                   'result)))
;; masked variable name
(assert-equal? (tn)
               '(100 200 300)
               (let ((cnt 100)
                     (cnt2 200)
                     (cnt3 300))
                 (let loop ((cnt (+ -3 3))
                            (cnt2 0)
                            (cnt3 (length '(#t #t #t))))
                   (if (not (>= cnt 3))
                       (begin
                         (set! cnt (+ cnt 1))
                         (set! cnt2 (- cnt2 1))
                         (set! cnt3 (* cnt3 3))
                         (loop cnt cnt2 cnt3))))
                 (list cnt cnt2 cnt3)))
(assert-equal? (tn)
               '(4 5 3)
               (let loop1 ((var1 1)
                           (var2 2)
                           (var3 3))
                 (let loop2 ((var1 4)
                             (var2 5))
                   (list var1 var2 var3))))
(assert-equal? (tn)
               '(1 2 3)
               (let loop1 ((var1 1)
                           (var2 2)
                           (var3 3))
                 (let loop2 ((var1 4)
                             (var2 5))
                   'dummy)
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 9)
               (let loop1 ((var1 1)
                           (var2 2)
                           (var3 3))
                 (let loop2 ((var1 4)
                             (var2 5))
                   (set! var3 (+ var1 var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 30)
               (let loop1 ((var1 1)
                           (var2 2)
                           (var3 3))
                 (let loop2 ((var1 4)
                             (var2 5))
                   (set! var1 10)
                   (set! var2 20)
                   (set! var3 (+ var1 var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 3 (10 20))
               (let loop1 ((var1 1)
                           (var2 2)
                           (var3 3)
                           (var4 (let loop2 ((var1 4)
                                                 (var2 5))
                                       (set! var1 10)
                                       (set! var2 20)
                                       (list var1 var2))))
                 (list var1 var2 var3 var4)))
(assert-error  (tn)
               (lambda ()
                 (let loop1 ((var1 1)
                             (var2 2)
                             (var3 3)
                             (var4 (let loop2 ((var1 4)
                                                   (var2 5))
                                         (set! var3 10))))
                   (list var1 var2 var3 var4))))
;; no arg
(assert-equal? (tn)
               3
               (let ((cnt 0))
                 (let loop ()
                   (if (>= cnt 3)
                       cnt
                       (begin
                         (set! cnt (+ cnt 1))
                         (loop))))))
;; 1 arg
(assert-equal? (tn)
               3
               (let loop ((cnt 0))
                 (if (>= cnt 3)
                     cnt
                     (loop (+ cnt 1)))))
;; 3 arg + init with evaled value
(assert-equal? (tn)
               '(3 -3 81)
               (let loop ((cnt (+ -3 3))
                          (cnt2 0)
                          (cnt3 (length '(#t #t #t))))
                 (if (>= cnt 3)
                     (list cnt cnt2 cnt3)
                     (loop (+ cnt 1) (- cnt2 1) (* cnt3 3)))))
(assert-equal? (tn)
               '((2 54 -8)
                 (-33 1 29 3))
               (let loop ((lst '(3 29 -8 54 1 -33 2))
                          (even '())
                          (odd '()))
                 (cond
                  ((null? lst)
                   (list even odd))
                  ((even? (car lst))
                   (loop (cdr lst)
                         (cons (car lst) even)
                         odd))
                  (else
                    (loop (cdr lst)
                          even
                          (cons (car lst) odd))))))

(tn "named let lexical scope")
(define count-namedlet
  (let loop ((count-namedlet 0))  ;; intentionally same name
    (lambda ()
      (set! count-namedlet (+ count-namedlet 1))
      count-namedlet)))
(assert-true   (tn) (procedure? count-namedlet))
(assert-equal? (tn) 1 (count-namedlet))
(assert-equal? (tn) 2 (count-namedlet))
(assert-equal? (tn) 3 (count-namedlet))


;;
;; let*
;;
(tn "let* invalid form")
;; bindings and body required
(assert-error  (tn) (lambda ()
                      (let*)))
(assert-error  (tn) (lambda ()
                      (let* ())))
(assert-error  (tn) (lambda ()
                      (let* ((a)))))
(assert-error  (tn) (lambda ()
                      (let* ((a 1)))))
(assert-error  (tn) (lambda ()
                      (let* (a 1))))
(assert-error  (tn) (lambda ()
                      (let* a)))
(assert-error  (tn) (lambda ()
                      (let* #())))
(assert-error  (tn) (lambda ()
                      (let* #f)))
(assert-error  (tn) (lambda ()
                      (let* #t)))
;; bindings must be a list
(assert-error  (tn) (lambda ()
                      (let* a 'val)))
(if (provided? "siod-bugs")
    (assert-equal? (tn)
                   'val
                   (let* #f 'val))
    (assert-error  (tn) (lambda ()
                          (let* #f 'val))))
(assert-error  (tn) (lambda ()
                      (let* #() 'val)))
(assert-error  (tn) (lambda ()
                      (let* #t 'val)))
;; each binding must be a 2-elem list
(assert-error  (tn) (lambda ()
                      (let* (a 1))))
(if (provided? "siod-bugs")
    (assert-equal? (tn)
                   'val
                   (let* ((a)) 'val))
    (assert-error  (tn)
                   (lambda ()
                     (let* ((a)) 'val))))
(assert-error  (tn)
               (lambda ()
                 (let* ((a 1 'excessive)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ((a 1) . (b 2)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ((a . 1)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ((a  1)) . a)))
(assert-error  (tn)
               (lambda ()
                 (let* ((a  1)) 'val . a)))
(assert-error  (tn)
               (lambda ()
                 (let* (1) #t)))

(tn "let* env isolation")
(assert-equal? (tn)
               1
               (let* ((var1 1)
                      (var2 var1))
                 var2))
(assert-error  (tn)
               (lambda ()
                 (let* ((var1 var2)
                        (var2 2))
                   'result)))
;; The environment is extended even if empty bindings on
;; !SCM_STRICT_DEFINE_PLACEMENT
(assert-equal? (tn)
               1
               (let ((var1 1))
                 (let* ()
                   (define var1 2)
                   'dummy)
                 var1))
(if (provided? "sigscheme")
    (begin
      (assert-equal? (tn)
                     '(#f #t #t)
                     (let* ((var1 (symbol-bound? 'var1 (%%current-environment)))
                            (var2 (symbol-bound? 'var1 (%%current-environment)))
                            (var3 (symbol-bound? 'var1 (%%current-environment))))
                       (list var1 var2 var3)))
      (assert-equal? (tn)
                     '(#f #f #t)
                     (let* ((var1 (symbol-bound? 'var2 (%%current-environment)))
                            (var2 (symbol-bound? 'var2 (%%current-environment)))
                            (var3 (symbol-bound? 'var2 (%%current-environment))))
                       (list var1 var2 var3)))
      (assert-equal? (tn)
                     '(#f #f #f)
                     (let* ((var1 (symbol-bound? 'var3 (%%current-environment)))
                            (var2 (symbol-bound? 'var3 (%%current-environment)))
                            (var3 (symbol-bound? 'var3 (%%current-environment))))
                       (list var1 var2 var3)))))

(tn "let* internal definitions lacking sequence part")
;; at least one <expression> is required
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (define var1 1))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (define (proc1) 1))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (define var1 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (define (proc1) 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (define var1 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (define (proc1) 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define var1 1)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define var1 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)))))
;; appending a non-definition expression into a begin block is invalid
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define var1 1)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define var1 1)
                     (define var2 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val))))

(tn "let* internal definitions cross reference")
;; R5RS: 5.2.2 Internal definitions
;; Just as for the equivalent `letrec' expression, it must be possible to
;; evaluate each <expression> of every internal definition in a <body> without
;; assigning or referring to the value of any <variable> being defined.
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (define var1 1)
                   (define var2 var1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (define var1 var2)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (define var1 var1)
                   'val)))
(assert-equal? (tn)
               '(0 0 0 0 0)
               (let* ((var0 0))
                 (define var1 var0)
                 (define var2 var0)
                 (begin
                   (define var3 var0)
                   (begin
                     (define var4 var0)))
                 (define var5 var0)
                 (list var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let* ((var0 (symbol-bound? 'var1)))
                 (define var1 (symbol-bound? 'var1))
                 (define var2 (symbol-bound? 'var1))
                 (begin
                   (define var3 (symbol-bound? 'var1))
                   (begin
                     (define var4 (symbol-bound? 'var1))))
                 (define var5 (symbol-bound? 'var1))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let* ((var0 (symbol-bound? 'var2)))
                 (define var1 (symbol-bound? 'var2))
                 (define var2 (symbol-bound? 'var2))
                 (begin
                   (define var3 (symbol-bound? 'var2))
                   (begin
                     (define var4 (symbol-bound? 'var2))))
                 (define var5 (symbol-bound? 'var2))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let* ((var0 (symbol-bound? 'var3)))
                 (define var1 (symbol-bound? 'var3))
                 (define var2 (symbol-bound? 'var3))
                 (begin
                   (define var3 (symbol-bound? 'var3))
                   (begin
                     (define var4 (symbol-bound? 'var3))))
                 (define var5 (symbol-bound? 'var3))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let* ((var0 (symbol-bound? 'var4)))
                 (define var1 (symbol-bound? 'var4))
                 (define var2 (symbol-bound? 'var4))
                 (begin
                   (define var3 (symbol-bound? 'var4))
                   (begin
                     (define var4 (symbol-bound? 'var4))))
                 (define var5 (symbol-bound? 'var4))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (let* ((var0 (symbol-bound? 'var5)))
                 (define var1 (symbol-bound? 'var5))
                 (define var2 (symbol-bound? 'var5))
                 (begin
                   (define var3 (symbol-bound? 'var5))
                   (begin
                     (define var4 (symbol-bound? 'var5))))
                 (define var5 (symbol-bound? 'var5))
                 (list var0 var1 var2 var3 var4 var5)))
;; outer let cannot refer internal variable
(assert-error  (tn)
               (lambda ()
                 (let* ((var0 (lambda () var1)))
                   (define var1 (lambda () 1))
                   (eq? (var0) var0))))
;; defining procedure can refer other (and self) variables as if letrec
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let* ((var0 (lambda () 0)))
                 (define var1 (lambda () var0))
                 (define var2 (lambda () var0))
                 (begin
                   (define var3 (lambda () var0))
                   (begin
                     (define var4 (lambda () var0))))
                 (define var5 (lambda () var0))
                 (list (eq? (var1) var0)
                       (eq? (var2) var0)
                       (eq? (var3) var0)
                       (eq? (var4) var0)
                       (eq? (var5) var0))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let* ()
                 (define var1 (lambda () var1))
                 (define var2 (lambda () var1))
                 (begin
                   (define var3 (lambda () var1))
                   (begin
                     (define var4 (lambda () var1))))
                 (define var5 (lambda () var1))
                 (list (eq? (var1) var1)
                       (eq? (var2) var1)
                       (eq? (var3) var1)
                       (eq? (var4) var1)
                       (eq? (var5) var1))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let* ()
                 (define var1 (lambda () var2))
                 (define var2 (lambda () var2))
                 (begin
                   (define var3 (lambda () var2))
                   (begin
                     (define var4 (lambda () var2))))
                 (define var5 (lambda () var2))
                 (list (eq? (var1) var2)
                       (eq? (var2) var2)
                       (eq? (var3) var2)
                       (eq? (var4) var2)
                       (eq? (var5) var2))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let* ()
                 (define var1 (lambda () var3))
                 (define var2 (lambda () var3))
                 (begin
                   (define var3 (lambda () var3))
                   (begin
                     (define var4 (lambda () var3))))
                 (define var5 (lambda () var3))
                 (list (eq? (var1) var3)
                       (eq? (var2) var3)
                       (eq? (var3) var3)
                       (eq? (var4) var3)
                       (eq? (var5) var3))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let* ()
                 (define var1 (lambda () var4))
                 (define var2 (lambda () var4))
                 (begin
                   (define var3 (lambda () var4))
                   (begin
                     (define var4 (lambda () var4))))
                 (define var5 (lambda () var4))
                 (list (eq? (var1) var4)
                       (eq? (var2) var4)
                       (eq? (var3) var4)
                       (eq? (var4) var4)
                       (eq? (var5) var4))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (let* ()
                 (define var1 (lambda () var5))
                 (define var2 (lambda () var5))
                 (begin
                   (define var3 (lambda () var5))
                   (begin
                     (define var4 (lambda () var5))))
                 (define var5 (lambda () var5))
                 (list (eq? (var1) var5)
                       (eq? (var2) var5)
                       (eq? (var3) var5)
                       (eq? (var4) var5)
                       (eq? (var5) var5))))

(tn "let* internal definitions valid forms")
;; valid internal definitions
(assert-equal? (tn)
               '(1)
               (let* ()
                 (define var1 1)
                 (list var1)))
(assert-equal? (tn)
               '(1)
               (let* ()
                 (define (proc1) 1)
                 (list (proc1))))
(assert-equal? (tn)
               '(1 2)
               (let* ()
                 (define var1 1)
                 (define var2 2)
                 (list var1 var2)))
(assert-equal? (tn)
               '(1 2)
               (let* ()
                 (define (proc1) 1)
                 (define (proc2) 2)
                 (list (proc1) (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let* ()
                 (define var1 1)
                 (define (proc2) 2)
                 (list var1 (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let* ()
                 (define (proc1) 1)
                 (define var2 2)
                 (list (proc1) var2)))
;; SigScheme accepts '(begin)' as valid internal definition '(begin
;; <definition>*)' as defined in "7.1.6 Programs and definitions" of R5RS
;; although it is rejected as expression '(begin <sequence>)' as defined in
;; "7.1.3 Expressions".
(assert-equal? (tn)
               1
               (let* ()
                 (begin)
                 1))
(assert-equal? (tn)
               1
               (let* ()
                 (begin)
                 (define var1 1)
                 (begin)
                 1))
(assert-equal? (tn)
               '(1)
               (let* ()
                 (begin
                   (define var1 1))
                 (list var1)))
(assert-equal? (tn)
               '(1)
               (let* ()
                 (begin
                   (define (proc1) 1))
                 (list (proc1))))
(assert-equal? (tn)
               '(1 2)
               (let* ()
                 (begin
                   (define var1 1)
                   (define var2 2))
                 (list var1 var2)))
(assert-equal? (tn)
               '(1 2)
               (let* ()
                 (begin
                   (define (proc1) 1)
                   (define (proc2) 2))
                 (list (proc1) (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let* ()
                 (begin
                   (define var1 1)
                   (define (proc2) 2))
                 (list var1 (proc2))))
(assert-equal? (tn)
               '(1 2)
               (let* ()
                 (begin
                   (define (proc1) 1)
                   (define var2 2))
                 (list (proc1) var2)))
(assert-equal? (tn)
               '(1 2 3 4 5 6)
               (let* ()
                 (begin
                   (define (proc1) 1)
                   (define var2 2)
                   (begin
                     (define (proc3) 3)
                     (define var4 4)
                     (begin
                       (define (proc5) 5)
                       (define var6 6))))
                 (list (proc1) var2
                       (proc3) var4
                       (proc5) var6)))
;; begin block and single definition mixed
(assert-equal? (tn)
               '(1 2 3 4 5 6)
               (let* ()
                 (begin)
                 (define (proc1) 1)
                 (begin
                   (define var2 2)
                   (begin
                     (define (proc3) 3)
                     (begin)
                     (define var4 4)))
                 (begin)
                 (define (proc5) 5)
                 (begin
                   (begin
                     (begin
                       (begin)))
                   (define var6 6)
                   (begin))
                 (begin)
                 (list (proc1) var2
                       (proc3) var4
                       (proc5) var6)))

(tn "let* internal definitions invalid begin blocks")
;; appending a non-definition expression into a begin block is invalid
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define var1 1)
                     'val)
                   (list var1))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     'val)
                   (list (proc1)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define var1 1)
                     (define var2 2)
                     'val)
                   (list var1 var2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)
                     'val)
                   (list (proc1) (proc2)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)
                     'val)
                   (list var1 (proc2)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val)
                   (list (proc1) var2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)
                         'val)))
                   (list (proc1) var2
                         (proc3) var4
                         (proc5) var6))))

(tn "let* internal definitions invalid placement")
;; a non-definition expression prior to internal definition is invalid
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define var1 1))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define (proc1) 1))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define var1 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define (proc1) 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define var1 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define (proc1) 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define var1 1)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define (proc1) 1)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define var1 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define var1 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)))))))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)))))))
;; a non-definition expression prior to internal definition is invalid even if
;; expression(s) is following the internal definition
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define var1 1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define (proc1) 1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define var1 1)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define (proc1) 1)
                   (define (proc2) 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define var1 1)
                   (define (proc2) 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (define (proc1) 1)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define var1 1))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define (proc1) 1))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define var1 1)
                     (define var2 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define var1 1)
                     (define (proc2) 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (let* ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6))))
                   (list (proc1) var2
                         (proc3) var4
                         (proc5) var6))))

(tn "let* binding syntactic keywords")
(assert-error  (tn)
               (lambda ()
                 (let* ((syn define))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn if))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn and))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn cond))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn begin))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn do))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn delay))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn let*))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn else))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn =>))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn quote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn quasiquote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn unquote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (let* ((syn unquote-splicing))
                   #t)))


(tn "let*")
;; empty bindings is allowed by the formal syntax spec
(assert-equal? (tn)
               'result
               (let* () 'result))
;; duplicate variable name is allowd on let*
(assert-equal? (tn)
               2
               (let* ((var1 1)
                      (var1 2))
                 var1))
;; masked variable name
(assert-equal? (tn)
               '(4 5 3)
               (let* ((var1 1)
                      (var2 2)
                      (var3 3))
                 (let* ((var1 4)
                        (var2 5))
                   (list var1 var2 var3))))
(assert-equal? (tn)
               '(1 2 3)
               (let* ((var1 1)
                      (var2 2)
                      (var3 3))
                 (let* ((var1 4)
                        (var2 5))
                   'dummy)
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 9)
               (let* ((var1 1)
                      (var2 2)
                      (var3 3))
                 (let* ((var1 4)
                        (var2 5))
                   (set! var3 (+ var1 var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 30)
               (let* ((var1 1)
                      (var2 2)
                      (var3 3))
                 (let* ((var1 4)
                        (var2 5))
                   (set! var1 10)
                   (set! var2 20)
                   (set! var3 (+ var1 var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 30 (10 20 30))
               (let* ((var1 1)
                      (var2 2)
                      (var3 3)
                      (var4 (let* ((var1 4)
                                       (var2 5))
                                  (set! var1 10)
                                  (set! var2 20)
                                  (set! var3 30)
                                  (list var1 var2 var3))))
                 (list var1 var2 var3 var4)))
;; normal case(s)
(assert-equal? (tn)
               '(1 2 3)
               (let* ((var1 1)
                      (var2 (+ var1 1))
                      (var3 (+ var2 1)))
                 (list var1 var2 var3)))

(tn "let* lexical scope")
(define count-let*
  (let* ((count-let* 0))  ;; intentionally same name
    (lambda ()
      (set! count-let* (+ count-let* 1))
      count-let*)))
(assert-true   (tn) (procedure? count-let*))
(assert-equal? (tn) 1 (count-let*))
(assert-equal? (tn) 2 (count-let*))
(assert-equal? (tn) 3 (count-let*))


;;
;; letrec
;;
(tn "letrec invalid form")
;; bindings and body required
(assert-error  (tn) (lambda ()
                      (letrec)))
(assert-error  (tn) (lambda ()
                      (letrec ())))
(assert-error  (tn) (lambda ()
                      (letrec ((a)))))
(assert-error  (tn) (lambda ()
                      (letrec ((a 1)))))
(assert-error  (tn) (lambda ()
                      (letrec (a 1))))
(assert-error  (tn) (lambda ()
                      (letrec a)))
(assert-error  (tn) (lambda ()
                      (letrec #())))
(assert-error  (tn) (lambda ()
                      (letrec #f)))
(assert-error  (tn) (lambda ()
                      (letrec #t)))
;; bindings must be a list
(assert-error  (tn) (lambda ()
                      (letrec a 'val)))
(if (provided? "siod-bugs")
    (assert-equal? (tn)
                   'val
                   (letrec #f 'val))
    (assert-error  (tn) (lambda ()
                          (letrec #f 'val))))
(assert-error  (tn) (lambda ()
                      (letrec #() 'val)))
(assert-error  (tn) (lambda ()
                      (letrec #t 'val)))
;; each binding must be a 2-elem list
(assert-error  (tn) (lambda ()
                      (letrec (a 1) 'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((a)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((a 1 'excessive)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((a 1) . (b 2)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((a . 1)) 'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((a  1)) . a)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((a  1)) 'val . a)))
(assert-error  (tn)
               (lambda ()
                 (letrec (1) #t)))

(tn "letrec env isolation")
;; referencing a variable within bindings evaluation is invalid
(assert-error  (tn)
               (lambda ()
                 (letrec ((var1 1)
                          (var2 var1))
                   'result)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((var1 var2)
                          (var2 2))
                   'result)))
;; all variables are kept unbound until body evaluation
(assert-equal? (tn)
               '(#f #f #f)
               (letrec ((var1 (symbol-bound? 'var1))
                        (var2 (symbol-bound? 'var1))
                        (var3 (symbol-bound? 'var1)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(#f #f #f)
               (letrec ((var1 (symbol-bound? 'var2))
                        (var2 (symbol-bound? 'var2))
                        (var3 (symbol-bound? 'var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(#f #f #f)
               (letrec ((var1 (symbol-bound? 'var3))
                        (var2 (symbol-bound? 'var3))
                        (var3 (symbol-bound? 'var3)))
                 (list var1 var2 var3)))
;; all variables can be referred from any position of the bindings
(assert-equal? (tn)
               '(#t #t #t)
               (letrec ((var1 (lambda () var1))
                        (var2 (lambda () var1))
                        (var3 (lambda () var1)))
                 (list (eq? (var1) var1)
                       (eq? (var2) var1)
                       (eq? (var3) var1))))
(assert-equal? (tn)
               '(#t #t #t)
               (letrec ((var1 (lambda () var2))
                        (var2 (lambda () var2))
                        (var3 (lambda () var2)))
                 (list (eq? (var1) var2)
                       (eq? (var2) var2)
                       (eq? (var3) var2))))
(assert-equal? (tn)
               '(#t #t #t)
               (letrec ((var1 (lambda () var3))
                        (var2 (lambda () var3))
                        (var3 (lambda () var3)))
                 (list (eq? (var1) var3)
                       (eq? (var2) var3)
                       (eq? (var3) var3))))

(tn "letrec internal definitions lacking sequence part")
;; at least one <expression> is required
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (define var1 1))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (define (proc1) 1))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (define var1 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (define (proc1) 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (define var1 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (define (proc1) 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define var1 1)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define var1 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)))))
;; appending a non-definition expression into a begin block is invalid
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define var1 1)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define var1 1)
                     (define var2 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)
                     'val))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val))))

(tn "letrec internal definitions cross reference")
;; R5RS: 5.2.2 Internal definitions
;; Just as for the equivalent `letrec' expression, it must be possible to
;; evaluate each <expression> of every internal definition in a <body> without
;; assigning or referring to the value of any <variable> being defined.
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (define var1 1)
                   (define var2 var1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (define var1 var2)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (define var1 var1)
                   'val)))
(assert-equal? (tn)
               '(0 0 0 0 0)
               (letrec ((var0 0))
                 (define var1 var0)
                 (define var2 var0)
                 (begin
                   (define var3 var0)
                   (begin
                     (define var4 var0)))
                 (define var5 var0)
                 (list var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (letrec ((var0 (symbol-bound? 'var1)))
                 (define var1 (symbol-bound? 'var1))
                 (define var2 (symbol-bound? 'var1))
                 (begin
                   (define var3 (symbol-bound? 'var1))
                   (begin
                     (define var4 (symbol-bound? 'var1))))
                 (define var5 (symbol-bound? 'var1))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (letrec ((var0 (symbol-bound? 'var2)))
                 (define var1 (symbol-bound? 'var2))
                 (define var2 (symbol-bound? 'var2))
                 (begin
                   (define var3 (symbol-bound? 'var2))
                   (begin
                     (define var4 (symbol-bound? 'var2))))
                 (define var5 (symbol-bound? 'var2))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (letrec ((var0 (symbol-bound? 'var3)))
                 (define var1 (symbol-bound? 'var3))
                 (define var2 (symbol-bound? 'var3))
                 (begin
                   (define var3 (symbol-bound? 'var3))
                   (begin
                     (define var4 (symbol-bound? 'var3))))
                 (define var5 (symbol-bound? 'var3))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (letrec ((var0 (symbol-bound? 'var4)))
                 (define var1 (symbol-bound? 'var4))
                 (define var2 (symbol-bound? 'var4))
                 (begin
                   (define var3 (symbol-bound? 'var4))
                   (begin
                     (define var4 (symbol-bound? 'var4))))
                 (define var5 (symbol-bound? 'var4))
                 (list var0 var1 var2 var3 var4 var5)))
(assert-equal? (tn)
               '(#f #f #f #f #f #f)
               (letrec ((var0 (symbol-bound? 'var5)))
                 (define var1 (symbol-bound? 'var5))
                 (define var2 (symbol-bound? 'var5))
                 (begin
                   (define var3 (symbol-bound? 'var5))
                   (begin
                     (define var4 (symbol-bound? 'var5))))
                 (define var5 (symbol-bound? 'var5))
                 (list var0 var1 var2 var3 var4 var5)))
;; outer let cannot refer internal variable even if letrec
(assert-error  (tn)
               (lambda ()
                 (letrec ((var0 (lambda () var1)))
                   (define var1 (lambda () 1))
                   (eq? (var0) var0))))
;; defining procedure can refer other (and self) variables as if letrec
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (letrec ((var0 (lambda () 0)))
                 (define var1 (lambda () var0))
                 (define var2 (lambda () var0))
                 (begin
                   (define var3 (lambda () var0))
                   (begin
                     (define var4 (lambda () var0))))
                 (define var5 (lambda () var0))
                 (list (eq? (var1) var0)
                       (eq? (var2) var0)
                       (eq? (var3) var0)
                       (eq? (var4) var0)
                       (eq? (var5) var0))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (letrec ()
                 (define var1 (lambda () var1))
                 (define var2 (lambda () var1))
                 (begin
                   (define var3 (lambda () var1))
                   (begin
                     (define var4 (lambda () var1))))
                 (define var5 (lambda () var1))
                 (list (eq? (var1) var1)
                       (eq? (var2) var1)
                       (eq? (var3) var1)
                       (eq? (var4) var1)
                       (eq? (var5) var1))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (letrec ()
                 (define var1 (lambda () var2))
                 (define var2 (lambda () var2))
                 (begin
                   (define var3 (lambda () var2))
                   (begin
                     (define var4 (lambda () var2))))
                 (define var5 (lambda () var2))
                 (list (eq? (var1) var2)
                       (eq? (var2) var2)
                       (eq? (var3) var2)
                       (eq? (var4) var2)
                       (eq? (var5) var2))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (letrec ()
                 (define var1 (lambda () var3))
                 (define var2 (lambda () var3))
                 (begin
                   (define var3 (lambda () var3))
                   (begin
                     (define var4 (lambda () var3))))
                 (define var5 (lambda () var3))
                 (list (eq? (var1) var3)
                       (eq? (var2) var3)
                       (eq? (var3) var3)
                       (eq? (var4) var3)
                       (eq? (var5) var3))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (letrec ()
                 (define var1 (lambda () var4))
                 (define var2 (lambda () var4))
                 (begin
                   (define var3 (lambda () var4))
                   (begin
                     (define var4 (lambda () var4))))
                 (define var5 (lambda () var4))
                 (list (eq? (var1) var4)
                       (eq? (var2) var4)
                       (eq? (var3) var4)
                       (eq? (var4) var4)
                       (eq? (var5) var4))))
(assert-equal? (tn)
               '(#t #t #t #t #t)
               (letrec ()
                 (define var1 (lambda () var5))
                 (define var2 (lambda () var5))
                 (begin
                   (define var3 (lambda () var5))
                   (begin
                     (define var4 (lambda () var5))))
                 (define var5 (lambda () var5))
                 (list (eq? (var1) var5)
                       (eq? (var2) var5)
                       (eq? (var3) var5)
                       (eq? (var4) var5)
                       (eq? (var5) var5))))

(tn "letrec internal definitions valid forms")
;; valid internal definitions
(assert-equal? (tn)
               '(1)
               (letrec ()
                 (define var1 1)
                 (list var1)))
(assert-equal? (tn)
               '(1)
               (letrec ()
                 (define (proc1) 1)
                 (list (proc1))))
(assert-equal? (tn)
               '(1 2)
               (letrec ()
                 (define var1 1)
                 (define var2 2)
                 (list var1 var2)))
(assert-equal? (tn)
               '(1 2)
               (letrec ()
                 (define (proc1) 1)
                 (define (proc2) 2)
                 (list (proc1) (proc2))))
(assert-equal? (tn)
               '(1 2)
               (letrec ()
                 (define var1 1)
                 (define (proc2) 2)
                 (list var1 (proc2))))
(assert-equal? (tn)
               '(1 2)
               (letrec ()
                 (define (proc1) 1)
                 (define var2 2)
                 (list (proc1) var2)))
;; SigScheme accepts '(begin)' as valid internal definition '(begin
;; <definition>*)' as defined in "7.1.6 Programs and definitions" of R5RS
;; although it is rejected as expression '(begin <sequence>)' as defined in
;; "7.1.3 Expressions".
(assert-equal? (tn)
               1
               (letrec ()
                 (begin)
                 1))
(assert-equal? (tn)
               1
               (letrec ()
                 (begin)
                 (define var1 1)
                 (begin)
                 1))
(assert-equal? (tn)
               '(1)
               (letrec ()
                 (begin
                   (define var1 1))
                 (list var1)))
(assert-equal? (tn)
               '(1)
               (letrec ()
                 (begin
                   (define (proc1) 1))
                 (list (proc1))))
(assert-equal? (tn)
               '(1 2)
               (letrec ()
                 (begin
                   (define var1 1)
                   (define var2 2))
                 (list var1 var2)))
(assert-equal? (tn)
               '(1 2)
               (letrec ()
                 (begin
                   (define (proc1) 1)
                   (define (proc2) 2))
                 (list (proc1) (proc2))))
(assert-equal? (tn)
               '(1 2)
               (letrec ()
                 (begin
                   (define var1 1)
                   (define (proc2) 2))
                 (list var1 (proc2))))
(assert-equal? (tn)
               '(1 2)
               (letrec ()
                 (begin
                   (define (proc1) 1)
                   (define var2 2))
                 (list (proc1) var2)))
(assert-equal? (tn)
               '(1 2 3 4 5 6)
               (letrec ()
                 (begin
                   (define (proc1) 1)
                   (define var2 2)
                   (begin
                     (define (proc3) 3)
                     (define var4 4)
                     (begin
                       (define (proc5) 5)
                       (define var6 6))))
                 (list (proc1) var2
                       (proc3) var4
                       (proc5) var6)))
;; begin block and single definition mixed
(assert-equal? (tn)
               '(1 2 3 4 5 6)
               (letrec ()
                 (begin)
                 (define (proc1) 1)
                 (begin
                   (define var2 2)
                   (begin
                     (define (proc3) 3)
                     (begin)
                     (define var4 4)))
                 (begin)
                 (define (proc5) 5)
                 (begin
                   (begin
                     (begin
                       (begin)))
                   (define var6 6)
                   (begin))
                 (begin)
                 (list (proc1) var2
                       (proc3) var4
                       (proc5) var6)))

(tn "letrec internal definitions invalid begin blocks")
;; appending a non-definition expression into a begin block is invalid
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define var1 1)
                     'val)
                   (list var1))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     'val)
                   (list (proc1)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define var1 1)
                     (define var2 2)
                     'val)
                   (list var1 var2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)
                     'val)
                   (list (proc1) (proc2)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define var1 1)
                     (define (proc2) 2)
                     'val)
                   (list var1 (proc2)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val)
                   (list (proc1) var2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)
                         'val)))
                   (list (proc1) var2
                         (proc3) var4
                         (proc5) var6))))

(tn "letrec internal definitions invalid placement")
;; a non-definition expression prior to internal definition is invalid
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define var1 1))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define (proc1) 1))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define var1 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define (proc1) 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define var1 1)
                   (define (proc2) 2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define (proc1) 1)
                   (define var2 2))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define var1 1)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define (proc1) 1)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define var1 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define var1 1)
                     (define (proc2) 2)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)))))))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     'val
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6)))))))
;; a non-definition expression prior to internal definition is invalid even if
;; expression(s) is following the internal definition
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define var1 1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define (proc1) 1)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define var1 1)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define (proc1) 1)
                   (define (proc2) 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define var1 1)
                   (define (proc2) 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (define (proc1) 1)
                   (define var2 2)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin)
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define var1 1))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define (proc1) 1))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define var1 1)
                     (define var2 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define (proc2) 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define var1 1)
                     (define (proc2) 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2))
                   'val)))
(assert-error  (tn)
               (lambda ()
                 (letrec ()
                   'val
                   (begin
                     (define (proc1) 1)
                     (define var2 2)
                     (begin
                       (define (proc3) 3)
                       (define var4 4)
                       (begin
                         (define (proc5) 5)
                         (define var6 6))))
                   (list (proc1) var2
                         (proc3) var4
                         (proc5) var6))))

(tn "letrec binding syntactic keywords")
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn define))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn if))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn and))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn cond))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn begin))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn do))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn delay))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn let*))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn else))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn =>))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn quote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn quasiquote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn unquote))
                   #t)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((syn unquote-splicing))
                   #t)))


(tn "letrec")
;; empty bindings is allowed by the formal syntax spec
(assert-equal? (tn)
               'result
               (letrec () 'result))
;; duplicate variable name
(assert-error  (tn)
               (lambda ()
                 (letrec ((var1 1)
                          (var1 2))
                   'result)))
;; masked variable name
(assert-equal? (tn)
               '(#t #t #t #t #f #f #t #t #f #t)
               (letrec ((var1 (lambda () var3))
                        (var2 (lambda () var4))
                        (var3 (lambda () var3))
                        (var4 (lambda () var4))
                        (var1in #f)
                        (var2in #f)
                        (var5in #f))
                 (letrec ((var1 (lambda () var1))
                          (var2 (lambda () var1))
                          (var5 (lambda () var3)))
                   (set! var1in var1)
                   (set! var2in var2)
                   (set! var5in var5))
                 (list (eq? (var1) var3)
                       (eq? (var2) var4)
                       (eq? (var3) var3)
                       (eq? (var4) var4)
                       (eq? (var1in) var1)
                       (eq? (var2in) var1)
                       (eq? (var1in) var1in)
                       (eq? (var2in) var1in)
                       (eq? (var2in) var2in)
                       (eq? (var5in) var3))))
(assert-equal? (tn)
               '(4 5 3)
               (letrec ((var1 1)
                        (var2 2)
                        (var3 3))
                 (letrec ((var1 4)
                          (var2 5))
                   (list var1 var2 var3))))
(assert-equal? (tn)
               '(1 2 3)
               (letrec ((var1 1)
                        (var2 2)
                        (var3 3))
                 (letrec ((var1 4)
                          (var2 5))
                   'dummy)
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 9)
               (letrec ((var1 1)
                        (var2 2)
                        (var3 3))
                 (letrec ((var1 4)
                          (var2 5))
                   (set! var3 (+ var1 var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 30)
               (letrec ((var1 1)
                        (var2 2)
                        (var3 3))
                 (letrec ((var1 4)
                          (var2 5))
                   (set! var1 10)
                   (set! var2 20)
                   (set! var3 (+ var1 var2)))
                 (list var1 var2 var3)))
(assert-equal? (tn)
               '(1 2 3 (10 20))
               (letrec ((var1 1)
                        (var2 2)
                        (var3 3)
                        (var4 (letrec ((var1 4)
                                           (var2 5))
                                    (set! var1 10)
                                    (set! var2 20)
                                    (list var1 var2))))
                 (list var1 var2 var3 var4)))
(assert-error  (tn)
               (lambda ()
                 (letrec ((var1 1)
                          (var2 2)
                          (var3 3)
                          (var4 (letrec ((var1 4)
                                             (var2 5))
                                      (set! var3 10))))
                   (list var1 var2 var3 var4))))
;; variable reference
(assert-equal? (tn)
               3
               (letrec ((proc (lambda () var))
                        (var  3))
                 (proc)))
;; ordinary recursions
(assert-equal? (tn)
               4
               (letrec ((proc1 (lambda (n) (+ n 1)))
                        (proc2 (lambda (n) (proc1 n))))
                 (proc2 3)))
(assert-equal? (tn)
               6
               (letrec ((proc1 (lambda (n) (proc2 n)))
                        (proc2 (lambda (n) (+ n 1))))
                 (proc1 5)))
(assert-equal? (tn)
               #t
               (letrec ((even?
                         (lambda (n)
                           (if (zero? n)
                               #t
                               (odd? (- n 1)))))
                        (odd?
                         (lambda (n)
                           (if (zero? n)
                               #f
                               (even? (- n 1))))))
                 (even? 88)))
(assert-equal? (tn)
               #f
               (letrec ((even?
                         (lambda (n)
                           (if (zero? n)
                               #t
                               (odd? (- n 1)))))
                        (odd?
                         (lambda (n)
                           (if (zero? n)
                               #f
                               (even? (- n 1))))))
                 (odd? 88)))

(tn "letrec lexical scope")
(define count-letrec
  (letrec ((count-letrec 0))  ;; intentionally same name
    (lambda ()
      (set! count-letrec (+ count-letrec 1))
      count-letrec)))
(assert-true   (tn) (procedure? count-letrec))
(assert-equal? (tn) 1 (count-letrec))
(assert-equal? (tn) 2 (count-letrec))
(assert-equal? (tn) 3 (count-letrec))


(total-report)
