@node Introduction
@chapter Introduction

@comment Keep synchronized with design.txt for now -- YamaKen 2006-04-04

This is a user's document and reference manual of SigScheme, R5RS scheme interpreter.

@menu
* Design Concept of SigScheme::
@end menu

@node Design Concept of SigScheme
@section Design Concept of SigScheme

SigScheme is a Scheme interpreter, comforming Scheme language standard called R5RS, ``Revised^5 Report on the Algorithmic Language Scheme'' (@ref{r5rs,[R5RS],R5RS}). And also supports some SRFIs (@uref{http://srfi.schemers.org}).

SigScheme mainly aims to be used in the Embedded platforms (i.e. non-desktop OS, hardware) and be embedded into an application. Here's a list of the design concept emphasized in SigScheme.

@comment Following texts are converted from design.txt (``Design of SigScheme''). These texts will be separated into another chapter or document since it is not intended to be an ``introduction''.  -- YamaKen 2006-04-04

@table @b
@item Purposes
@table @b
@item Embedded into an application
@item Sutable for embedded platforms (i.e. non-desktop OS and hardware)
@end table

@item Requirements
@table @b
@item 3-clause BSD license
@item Basic R5RS conformance
@item Small footprint
@item Low memory consumption
@item Highly modular and customizable
@item Code readability to enable learning Scheme by implementation
@item Easily extensible by C
@end table

@item Code organization
@table @b
@item Memory allocators
@item Exception and error handling
@item Storage Abstraction Layer
@item Continuation
@item Environment
@item Procedures and syntaxes
@item Reader
@item Writer
@item Multibyte character processing
@item Ports
@end table

@item Trade-offs
@table @b
@item Strict form validation
@item Multibyte string processing
@item Function aggregation to share prolog/epilog code fragment
@end table

@item API and ABI
@table @b
@item ABI incompatibility between configurations
@item SAL and ABI
@item Dynamic link
@item Static link
@item Writing an extension by C
@end table

@end table
