AC_PREREQ(2.57)

AC_INIT([sigscheme], [0.5.0], [mover@hct.zaq.ne.jp])
AM_INIT_AUTOMAKE(1.8.3)

AC_CONFIG_SRCDIR([src/sigscheme.h])
AC_CONFIG_HEADER([config.h])

# Checks for programs.
AC_PROG_CC
AC_PROG_LIBTOOL
AC_PATH_PROG(has_ruby, ruby, no)
if test x$has_ruby = xno ; then
  AC_MSG_ERROR([please install ruby (http://www.ruby-lang.org/)])
fi

# Checks for libraries.

AX_LIB_GLIBC

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([limits.h malloc.h stddef.h stdlib.h string.h \
                  strings.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_VOLATILE
#AC_C_LONG_LONG
#AC_C_LONG_DOUBLE
AC_C_CHAR_UNSIGNED
AC_C_BIGENDIAN
AC_C_STRINGIZE
AX_C___ATTRIBUTE__

AX_CREATE_STDINT_H(src/my-stdint.h)
AC_TYPE_SIZE_T

AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
#AC_CHECK_SIZEOF(float)
#AC_CHECK_SIZEOF(double)
#AC_CHECK_SIZEOF(long double)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(size_t)

# Do not assume (sizeof(int32_t) == 4) and so on (i.e. do not (CHAR_BIT == 8)).
AC_CHECK_SIZEOF(int16_t)
AC_CHECK_SIZEOF(int32_t)
AC_CHECK_SIZEOF(int64_t)
#AC_CHECK_SIZEOF(int_least8_t)
#AC_CHECK_SIZEOF(int_least16_t)
#AC_CHECK_SIZEOF(int_least32_t)
#AC_CHECK_SIZEOF(int_least64_t)
#AC_CHECK_SIZEOF(int_fast8_t)
#AC_CHECK_SIZEOF(int_fast16_t)
AC_CHECK_SIZEOF(int_fast32_t)
#AC_CHECK_SIZEOF(int_fast64_t)
AC_CHECK_SIZEOF(intmax_t)
AC_CHECK_SIZEOF(intptr_t)

# Checks for library functions.

AC_CHECK_FUNCS([strtoll strtoimax \
                fileno getcwd getpagesize])

AC_CHECK_FUNCS(posix_memalign,
  [
    # For posix_memalign(3). although this value is overridden by _GNU_SOURCE
    # on glibc, keep this for other environments.
    AC_DEFINE(_POSIX_C_SOURCE, 200112L,
      [Define to 200112L to enable posix_memalign(3).])
  ])

AC_CHECK_FUNCS(strdup,
  [
    # Overrides _POSIX_C_SOURCE
    AC_DEFINE(_XOPEN_SOURCE, 500, [Define to 500 to enable strdup(3).])
  ])

AC_CHECK_FUNCS(strcasecmp,
  [
    if test "x$ax_cv_lib_glibc" = xyes; then
      AC_DEFINE(_BSD_SOURCE, 1,
        [Define to 1 if it is needed to enable strcasecmp(3).])
    fi
  ],
  [
    AC_LIBOBJ(strcasecmp)
  ])

AX_CHECK_PAGE_ALIGNED_MALLOC

AC_DEFINE(SCM_ENCODING_USE_WITH_SIGSCHEME, 1,
  [Define to 1 to adapt encoding.c to SigScheme.])
AC_DEFINE(SCM_SCMPORT_USE_WITH_SIGSCHEME, 1,
  [Define to 1 to adapt scmport*.[hc] to SigScheme.])

# Configure Option
AC_ARG_ENABLE(debug,
  AC_HELP_STRING([--enable-debug],
                 [enable debugging]),
  [],
  [
    enable_debug="no"
  ])
if test x$enable_debug = xyes; then
	CFLAGS="$CFLAGS -g -DDEBUG"
else
	CFLAGS="$CFLAGS -O2"
fi

# Default Compiler Option for gcc
if test x$CC = xgcc; then
	CFLAGS="$CFLAGS -Wall -std=gnu89 -pedantic -Wchar-subscripts -Wmissing-declarations -Wredundant-decls -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wcast-align -Wsign-compare"
fi

# FIXME: configure variables appropriately
use_yes="yes"
use_no="no"
# R5RS Features
AM_CONDITIONAL(USE_CONTINUATION,        test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_QUASIQUOTE,          test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_HYGIENIC_MACRO,      test "x$use_no" = xyes)
AM_CONDITIONAL(USE_INT,                 test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_RATIONAL,            test "x$use_no" = xyes)
AM_CONDITIONAL(USE_REAL,                test "x$use_no" = xyes)
AM_CONDITIONAL(USE_COMPLEX,             test "x$use_no" = xyes)
AM_CONDITIONAL(USE_NUMBER,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_CHAR,                test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_STRING,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_VECTOR,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_PORT,                test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_READER,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_WRITER,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_LOAD,                test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_DEEP_CADRS,          test "x$use_yes" = xyes)

# Optional Features
AM_CONDITIONAL(USE_FORMAT,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_RAW_C_FORMAT,        test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_USE_SSCM_FORMAT_EXTENSION, test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SSCM_EXTENSIONS,     test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_LEGACY_MACRO,        test "x$use_no" = xyes)
AM_CONDITIONAL(USE_DUMP,                test "x$use_no" = xyes)
AM_CONDITIONAL(USE_EVAL_C_STRING,       test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI1,               test "x$use_no" = xyes)
AM_CONDITIONAL(USE_SRFI2,               test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI6,               test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI8,               test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI22,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI23,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI28,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI34,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI38,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI48,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI60,              test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI75_NAMED_CHARS,  test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SRFI75,              test "x$use_yes" = xyes)
AM_CONDITIONAL(COMPAT_SIOD,             test "x$use_yes" = xyes)
AM_CONDITIONAL(COMPAT_SIOD_BUGS,        test "x$use_yes" = xyes)

# Character Encoding Handlers
AM_CONDITIONAL(USE_UTF8,                test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_EUCCN,               test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_EUCJP,               test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_EUCKR,               test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_SJIS,                test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_MULTIBYTE_CHAR,      test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_UTF8_AS_DEFAULT,     test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_EUCCN_AS_DEFAULT,    test "x$use_no" = xyes)
AM_CONDITIONAL(USE_EUCJP_AS_DEFAULT,    test "x$use_no" = xyes)
AM_CONDITIONAL(USE_EUCKR_AS_DEFAULT,    test "x$use_no" = xyes)
AM_CONDITIONAL(USE_SJIS_AS_DEFAULT,     test "x$use_no" = xyes)

# Internal Behaviors
AM_CONDITIONAL(STRICT_R5RS,             test "x$use_no" = xyes)
AM_CONDITIONAL(STRICT_NULL_FORM,        test "x$use_no" = xyes)
AM_CONDITIONAL(STRICT_VECTOR_FORM,      test "x$use_yes" = xyes)
AM_CONDITIONAL(STRICT_ARGCHECK,         test "x$use_yes" = xyes)
AM_CONDITIONAL(STRICT_DEFINE_PLACEMENT, test "x$use_yes" = xyes)
AM_CONDITIONAL(STRICT_ENCODING_CHECK,   test "x$use_yes" = xyes)
AM_CONDITIONAL(CONST_LIST_LITERAL,      test "x$use_yes" = xyes)
AM_CONDITIONAL(CONST_VECTOR_LITERAL,    test "x$use_yes" = xyes)
AM_CONDITIONAL(ACCESSOR_ASSERT,         test "x$use_no" = xyes)
AM_CONDITIONAL(USE_VALUECONS,           test "x$use_yes" = xyes)
AM_CONDITIONAL(USE_NULL_CAPABLE_STRING, test "x$use_yes" = xyes)

# Storage configurations
# FIXME
AM_CONDITIONAL(USE_STORAGE_COMPACT,     test "x$use_no" = xyes)

AC_CONFIG_FILES([Makefile
                 m4/Makefile
                 src/Makefile
                 test-c/Makefile])

AC_SUBST(objdir)

AC_OUTPUT
