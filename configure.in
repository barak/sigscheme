# FIXME: fix configuration variable defining method as follows
#
# (1) Process --with-storage=IMPL and --enable-configuration=CONF. The shell
#     variables $use_* and $strict_* are not directly defined here. Only
#     $enable_foo are defined.
#
#   AC_ARG_ENABLE(configuration,
#     AC_HELP_STRING([--enable-configuration=CONFIGURATION],
#   ...
#   By default, 'full' is selected.]),
#     [
#       case $enable_configuration in
#         full)
#         r5rs)
#         siod)
#         dev)
#           ;;
#         *)
#           echo "unrecognized config: '$enable_configuration'."
#           exit 1
#           ;;
#       esac
#     ],
#     [
#       enable_configuration="full"
#     ])
#
#
# (2) Process all AC_ARG_ENABLE. Writing AC_ARG_ENABLE twice for a
#     configurationn variable for both --enable-foo and --disable-foo is not
#     work as intended (ja: AC_ARG_ENABLEを--enable-fooと--disable-fooのために2 
#     回書くのは意図したように動きません). Read automake info about
#     AC_ARG_ENABLE. To avoid dependency conflict, the shell variables $use_*
#     and $strict_* are not directly defined here. Only $enable_foo are
#     defined. The AC_ARG_ENABLE macro defines $enable_foo implicitly.
#
#   AC_ARG_ENABLE(internal-definitions,
#     AC_HELP_STRING([--enable-internal-definitions],
#                    [enable R5RS internal definitions]))
#
#
# (3) Define all shell variables with resolving & checking dependencies
#
#   if "x$enable_configuration" = "siod"; then
#     compat_siod="yes"
#     compat_siod_bugs="yes"
#   fi
#
#   if test "x$enable_internal_definitions" = xyes; then
#     use_internal_definitions="yes"
#   else
#     use_internal_definitions="no"
#   fi
#
#
# (4) Define automake conditionals and config.h macros in accordance with the
#     shell variables. To avoid human errors and keep maintainability high on
#     dependency editing, the shell variable definitions part (3) and this
#     definitions part (4) must be separated. i.e. collect all shell variable
#     definitions into one big section, and collect all automake conditionals
#     and config.h macros definitions part into another one big section.
#
#   AM_CONDITIONAL(USE_INTERNAL_DEFINITIONS, test "x$enable_internal_definitions" = xyes)
#   if test "x$enable_internal_definitions" = xyes; then
#     AC_DEFINE(SCM_USE_INTERNAL_DEFINITIONS, 1, [enable internal definitions])
#   fi


AC_PREREQ(2.57)
AC_INIT([SigScheme], [0.6.1], [mover@hct.zaq.ne.jp], [sigscheme])
AC_CONFIG_SRCDIR([src/sigscheme.c])
AC_CONFIG_HEADERS([src/config.h])
AM_INIT_AUTOMAKE([1.8.3 dist-bzip2])

# Checks for programs.
AC_PROG_CC
AC_PROG_LIBTOOL
AC_PROG_LN_S
AC_PROG_EGREP
# These programs are only needed on make dist
AC_PATH_PROGS(RUBY, ruby18 ruby)
AC_PATH_PROGS(PERL, perl5 perl)
AC_PATH_PROG(ASCIIDOC, asciidoc)
# GNU sed for test-c2/collect.sh
AC_PATH_PROGS(GSED, gsed sed)
AC_PATH_PROG(SH, sh)
# The modified version of the C testing framework
AC_PATH_PROG(CUTTER, cutter)
AC_PATH_PROGS(MD5, md5 md5sum)

# Checks for libraries.

AX_LIB_GLIBC

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([limits.h malloc.h stddef.h stdlib.h string.h \
                  strings.h unistd.h])
AC_CHECK_HEADER([cutter/cutter.h], have_cutter_h=yes, have_cutter_h=no)
AM_CONDITIONAL(HAVE_CUTTER_H, test "x$have_cutter_h" = xyes)

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_VOLATILE
#AC_C_LONG_LONG
#AC_C_LONG_DOUBLE
AC_C_CHAR_UNSIGNED
AC_C_BIGENDIAN
AX_C_DATA_ALIGNED
if test "x$ax_cv_c_data_aligned" = xno; then
  AC_MSG_ERROR([C data types are not aligned as we expected.])
fi
AX_C___ATTRIBUTE__
AC_C_STRINGIZE

AX_CREATE_STDINT_H(src/sigscheme-stdint.h)
AC_TYPE_SIZE_T

AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
#AC_CHECK_SIZEOF(float)
#AC_CHECK_SIZEOF(double)
#AC_CHECK_SIZEOF(long double)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(size_t)

# Do not assume (sizeof(int32_t) == 4) and so on (i.e. do not (CHAR_BIT == 8)).
AC_CHECK_SIZEOF(int16_t)
AC_CHECK_SIZEOF(int32_t)
AC_CHECK_SIZEOF(int64_t)
#AC_CHECK_SIZEOF(int_least8_t)
#AC_CHECK_SIZEOF(int_least16_t)
#AC_CHECK_SIZEOF(int_least32_t)
#AC_CHECK_SIZEOF(int_least64_t)
#AC_CHECK_SIZEOF(int_fast8_t)
#AC_CHECK_SIZEOF(int_fast16_t)
AC_CHECK_SIZEOF(int_fast32_t)
#AC_CHECK_SIZEOF(int_fast64_t)
AC_CHECK_SIZEOF(intmax_t)
AC_CHECK_SIZEOF(intptr_t)

# Checks for library functions.

# Enable this iff asprintf(3) or another GNU extension is needed
#AC_GNU_SOURCE

AC_CHECK_FUNCS([strtoll strtoimax \
                fileno getcwd getpagesize])

AC_CHECK_FUNCS(posix_memalign,
  [
    # For posix_memalign(3). although this value is overridden by _GNU_SOURCE
    # on glibc, keep this for other environments.
    AC_DEFINE(_POSIX_C_SOURCE, 200112L)
  ])
AH_VERBATIM(_POSIX_C_SOURCE,
[/* Define to 200112L to enable posix_memalign(3). */
#if SCM_COMPILING_LIBSSCM
#undef _POSIX_C_SOURCE
#endif])

AC_CHECK_FUNCS(strdup,
  [
    # Overrides _POSIX_C_SOURCE
    AC_DEFINE(_XOPEN_SOURCE, 500)
  ])
AH_VERBATIM(_XOPEN_SOURCE,
[/* Define to 500 to enable strdup(3). */
#if SCM_COMPILING_LIBSSCM
#undef _XOPEN_SOURCE
#endif])

AC_CHECK_FUNCS(strcasecmp,
  [
    if test "x$ax_cv_lib_glibc" = xyes; then
      AC_DEFINE(_BSD_SOURCE, 1)
    fi
  ],
  [
    AC_LIBOBJ(strcasecmp)
  ])
AH_VERBATIM(_BSD_SOURCE,
[/* Define to 1 if it is needed to enable strcasecmp(3). */
#if SCM_COMPILING_LIBSSCM
#undef _BSD_SOURCE
#endif])

AX_CHECK_PAGE_ALIGNED_MALLOC

AC_DEFINE(SCM_ENCODING_USE_WITH_SIGSCHEME, 1,
  [Define to 1 to adapt encoding.c to SigScheme.])
AC_DEFINE(SCM_SCMPORT_USE_WITH_SIGSCHEME, 1,
  [Define to 1 to adapt scmport*.[hc] to SigScheme.])

AM_MAINTAINER_MODE

AC_ARG_ENABLE(docdir,
  AC_HELP_STRING([--enable-docdir=DIR],
                 [text documentation @<:@DATADIR/sigscheme/doc@:>@]),
  [
    docdir=$enable_docdir
  ],
  [
    docdir=${datadir}/${PACKAGE}/doc
  ])

AC_ARG_ENABLE(htmldir,
  AC_HELP_STRING([--enable-htmldir=DIR],
                 [html documentation @<:@DOCDIR/html@:>@]),
  [
    htmldir=$enable_htmldir
  ],
  [
    htmldir=${docdir}/html
  ])

#------------------------------------------------------------------------------
# Configure Specs
#------------------------------------------------------------------------------
#--------------------------------------
# Define Full Spec
#--------------------------------------

# FIXME:
# - Make all the variables configurable via '--enable' and '--disable', and add
#   brief description for each vars as original src/config.h had.

#--------------------------------------
# R5RS Features
#--------------------------------------
# (cannot be 0 yet) use continuation
use_continuation="yes"

# (cannot be 0 yet) use quasiquotation
use_quasiquote="yes"

# use hygienic macros
use_hygienic_macro="yes"

# (not supported yet) use syntax-case; implies SCM_USE_UNHYGIENIC_MACRO
use_syntax_case="no"

# (not supported yet) syntactic closure
use_unhygienic_macro="no"

# use promise
use_promise="yes"

# (cannot be 0 yet) use integer numbers
use_int="yes"

# (not supported yet) use rational numbers
use_rational="no"

# (not supported yet) use real numbers
use_real="no"

# (not supported yet) use complex numbers
use_complex="no"

# (cannot be 0 yet) use character
use_char="yes"

# (cannot be 0 yet) use string
use_string="yes"

# (cannot be 0 yet) use vector
use_vector="yes"

# (cannot be 0 yet) use port
use_port="yes"

# (cannot be 0 yet) use sexp reader
use_reader="yes"

# (cannot be 0 yet) use sexp writer
use_writer="yes"

# (cannot be 0 yet) use 'load'
use_load="yes"

# use all c[ad]+r defined in R5RS
use_deep_cadrs="yes"

#--------------------------------------
# Optional Features
#--------------------------------------
# use internal format which takes raw C values from va_list
use_raw_c_format="yes"

# use 'format+'
use_sscm_format_extension="yes"

# use SigScheme-specific extensions
use_sscm_extensions="yes"

# (not supported yet) use define-macro
use_legacy_macro="no"

# (not supported yet) use storage dump
use_dump="no"

# use scm_eval_c_string()
use_eval_c_string="yes"

# use SRFI-1 list library (broken)
use_srfi1="no"

# use SRFI-2 'and-let*'
use_srfi2="yes"

# use SRFI-6 basic string ports
use_srfi6="yes"

# use SRFI-8 'receive'
use_srfi8="yes"

# use SRFI-22 running scheme scripts on Unix
use_srfi22="yes"

# use SRFI-23 'error'
use_srfi23="yes"

# use SRFI-28 'format'
use_srfi28="yes"

# use SRFI-34 exception handling for programs
use_srfi34="yes"

# use SRFI-38 'write-with-shared-structure'
use_srfi38="yes"

# use SRFI-48 'format' (superset of SRFI-28)
use_srfi48="yes"

# use SRFI-60 integers as bits
use_srfi60="yes"

# use named characters of SRFI-75 R6RS unicode data
use_srfi75_named_chars="yes"

# use SRFI-75 R6RS unicode data
use_srfi75="yes"

# use (some) SIOD compatible features
compat_siod="no"

# emulate the buggy behaviors of SIOD
compat_siod_bugs="no"

#--------------------------------------
# Internal Behaviors
#--------------------------------------
# use strict R5RS check
strict_r5rs="no"

# disallow quote-less ()
strict_null_form="no"

# disallow quote-less vector literal
strict_vector_form="yes"

# enable strict argument check
strict_argcheck="yes"

# reject invalid internal definitions
strict_define_placement="yes"

# do all feasible encoding error checks
strict_encoding_check="yes"

# make list literal immutable
const_list_literal="yes"

# make vector literal immutable
const_vector_literal="yes"

# enable strict type check with accessor
accessor_assert="yes"

# use experimental values passing
use_valuecons="yes"

# enable experimental null character in a middle of a string
use_null_capable_string="no"

# suppress warning with little wastes
use_warning_suppressor="yes"

#--------------------------------------
# Storage configurations
#--------------------------------------
#
# Storage layer implementation: choose exclusively.
#
# FIXME: set other storage-dependent configurations
use_storage_fatty="no"
use_storage_compact="no"
AC_ARG_WITH(storage,
  AC_HELP_STRING([--with-storage=IMPL],
                 [Choose the storage-layer implementation for SigScheme to use.
                 IMPL={fatty|compact}  (default: compact)]),
  [
    case $with_storage in
      fatty)
        use_storage_fatty="yes"
        ;;
      compact)
        use_storage_compact="yes"
        ;;
      *)
        AC_MSG_ERROR([unknown storage implementation])
        ;;
    esac
  ],
  [
    use_storage_compact="yes"
  ])

# use int64_t as scm_int_t
use_64bit_fixnum="no"

# use int32_t as scm_int_t
use_32bit_fixnum="no"

# use int as scm_int_t
use_int_fixnum="no"

# use long as scm_int_t (default)
use_long_fixnum="no"

# use int64_t as scm_intref_t
use_64bit_scmref="no"

# use int32_t as scm_intref_t
use_32bit_scmref="no"

# use intptr_t as scm_intref_t (default)
use_intptr_scmref="no"

#--------------------------------------
# Choose Spec
#--------------------------------------
AC_ARG_ENABLE(configuration,
  AC_HELP_STRING([--enable-configuration=CONFIGURATION],
                 [Choose SigScheme spec by CONFIGURATION.
Following specs are currently recognized:
(1)'full': Full Features.
(2)'r5rs': R5RS features only.
(3)'siod': SIOD compatible mode.
(4)'dev':  For developers.
By default, 'full' is selected.]),
  [
    case $enable_configuration in
      full)
        ;;
      r5rs)
        use_format="no"
        use_raw_c_format="no"
        use_sscm_format_extension="no"
        use_sscm_extensions="no"
        use_dump="no"
        use_srfi2="no"
        use_srfi6="no"
        use_srfi8="no"
        use_srfi22="yes"
        use_srfi23="no"
        use_srfi28="no"
        use_srfi34="yes"
        use_srfi38="yes"
        use_srfi48="no"
        use_srfi60="no"
        use_srfi75_named_chars="yes"
        use_srfi75="yes"
        ;;
      siod)
        compat_siod="yes"
        compat_siod_bugs="yes"
        strict_r5rs="no"
        strict_null_form="no"
        strict_argcheck="no"
        ;;
      dev)
        compat_siod="yes"
        compat_siod_bugs="yes"
        strict_r5rs="no"
        strict_null_form="no"
        strict_argcheck="yes"
        ;;
      *)
        echo "unrecognized config: '$enable_configuration'."
        exit 1
        ;;
    esac
  ],
  [
    enable_configuration="full"
  ])

#------------------------------------------------------------------------------
# Define Configuration
#------------------------------------------------------------------------------
#--------------------------------------
# R5RS Features
#--------------------------------------
#
# CONTINUATION
#
dnl AC_ARG_ENABLE(continuation,
dnl   AC_HELP_STRING([--enable-continuation],
dnl                  [enable continuation]),
dnl   [ use_continuation="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(continuation,
dnl   AC_HELP_STRING([--disable-continuation],
dnl                  [disable continuation]),
dnl   [ use_continuation="no" ],
dnl   [])

AM_CONDITIONAL(USE_CONTINUATION, test "x$use_continuation" = xyes)
if test "x$use_continuation" = xyes; then
  AC_DEFINE(SCM_USE_CONTINUATION, 1, [use continuation])
fi

#
# QUASIQUOTE
#
dnl AC_ARG_ENABLE(quasiquote,
dnl   AC_HELP_STRING([--enable-quasiquote],
dnl                  [enable quasiquote]),
dnl   [ use_quasiquote="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(quasiquote,
dnl   AC_HELP_STRING([--disable-quasiquote],
dnl                  [disable quasiquote]),
dnl   [ use_quasiquote="no" ],
dnl   [])

AM_CONDITIONAL(USE_QUASIQUOTE, test "x$use_quasiquote" = xyes)
if test "x$use_quasiquote" = xyes; then
  AC_DEFINE(SCM_USE_QUASIQUOTE, 1, [use quasiquotation])
fi

#
# HYGIENIC_MACRO
#
AC_ARG_ENABLE(hygienic-macro,
  AC_HELP_STRING([--enable-hygienic-macro],
                 [enable hygienic-macro]),
  [ use_hygienic_macro="yes" ],
  [])

AC_ARG_ENABLE(hygienic-macro,
  AC_HELP_STRING([--disable-hygienic-macro],
                 [disable hygienic-macro]),
  [ use_hygienic_macro="no" ],
  [])

AM_CONDITIONAL(USE_HYGIENIC_MACRO, test "x$use_hygienic_macro" = xyes)
if test "x$use_hygienic_macro" = xyes; then
  AC_DEFINE(SCM_USE_HYGIENIC_MACRO, 1, [use hygienic macros])
fi

#
# SYNTAX_CASE
#
dnl AC_ARG_ENABLE(syntax-case,
dnl   AC_HELP_STRING([--enable-syntax-case],
dnl                  [enable syntax-case]),
dnl   [ use_syntax_case="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(syntax-case,
dnl   AC_HELP_STRING([--disable-syntax-case],
dnl                  [disable syntax-case]),
dnl   [ use_syntax_case="no" ],
dnl   [])

AM_CONDITIONAL(USE_SYNTAX_CASE, test "x$use_syntax_case" = xyes)
if test "x$use_syntax_case" = xyes; then
  AC_DEFINE(SCM_USE_SYNTAX_CASE, 1, [use sytax-case])
fi

#
# UNHYGIENIC_MACRO
#
dnl AC_ARG_ENABLE(unhygienic-macro,
dnl   AC_HELP_STRING([--enable-unhygienic-macro],
dnl                  [enable unhygienic-macro]),
dnl   [ use_unhygienic_macro="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(unhygienic-macro,
dnl   AC_HELP_STRING([--disable-unhygienic-macro],
dnl                  [disable unhygienic-macro]),
dnl   [ use_unhygienic_macro="no" ],
dnl   [])

AM_CONDITIONAL(USE_UNHYGIENIC_MACRO, test "x$use_unhygienic_macro" = xyes)
if test "x$use_unhygienic_macro" = xyes; then
  AC_DEFINE(SCM_USE_UNHYGIENIC_MACRO, 1, [syntactic closure])
fi

#
# PROMISE
#
AM_CONDITIONAL(USE_PROMISE, test "x$use_promise" = xyes)
if test "x$use_promise" = xyes; then
  AC_DEFINE(SCM_USE_PROMISE, 1, [use promise])
fi

#
# INT
#
dnl AC_ARG_ENABLE(int,
dnl   AC_HELP_STRING([--enable-int],
dnl                  [enable int]),
dnl   [ use_int="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(int,
dnl   AC_HELP_STRING([--disable-int],
dnl                  [disable int]),
dnl   [ use_int="no" ],
dnl   [])

AM_CONDITIONAL(USE_INT, test "x$use_int" = xyes)
if test "x$use_int" = xyes; then
  AC_DEFINE(SCM_USE_INT, 1, [use integer numbers])
fi

#
# RATIONAL
#
dnl AC_ARG_ENABLE(rational,
dnl   AC_HELP_STRING([--enable-rational],
dnl                  [enable rational]),
dnl   [ use_rational="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(rational,
dnl   AC_HELP_STRING([--disable-rational],
dnl                  [disable rational]),
dnl   [ use_rational="no" ],
dnl   [])

AM_CONDITIONAL(USE_RATIONAL, test "x$use_rational" = xyes)
if test "x$use_rational" = xyes; then
  AC_DEFINE(SCM_USE_RATIONAL, 1, [use rational numbers])
fi

#
# REAL
#
dnl AC_ARG_ENABLE(real,
dnl   AC_HELP_STRING([--enable-real],
dnl                  [enable real]),
dnl   [ use_real="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(real,
dnl   AC_HELP_STRING([--disable-real],
dnl                  [disable real]),
dnl   [ use_real="no" ],
dnl   [])

AM_CONDITIONAL(USE_REAL, test "x$use_real" = xyes)
if test "x$use_real" = xyes; then
  AC_DEFINE(SCM_USE_REAL, 1, [use real numbers])
fi

#
# COMPLEX
#
dnl AC_ARG_ENABLE(complex,
dnl   AC_HELP_STRING([--enable-complex],
dnl                  [enable complex]),
dnl   [ use_complex="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(complex,
dnl   AC_HELP_STRING([--disable-complex],
dnl                  [disable complex]),
dnl   [ use_complex="no" ],
dnl   [])

AM_CONDITIONAL(USE_COMPLEX, test "x$use_complex" = xyes)
if test "x$use_complex" = xyes; then
  AC_DEFINE(SCM_USE_COMPLEX, 1, [use complex numbers])
fi

#
# CHAR
#
dnl AC_ARG_ENABLE(char,
dnl   AC_HELP_STRING([--enable-char],
dnl                  [enable char]),
dnl   [ use_char="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(char,
dnl   AC_HELP_STRING([--disable-char],
dnl                  [disable char]),
dnl   [ use_char="no" ],
dnl   [])

AM_CONDITIONAL(USE_CHAR, test "x$use_char" = xyes)
if test "x$use_char" = xyes; then
  AC_DEFINE(SCM_USE_CHAR, 1, [use character])
fi

#
# STRING
#
dnl AC_ARG_ENABLE(string,
dnl   AC_HELP_STRING([--enable-string],
dnl                  [enable string]),
dnl   [ use_string="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(string,
dnl   AC_HELP_STRING([--disable-string],
dnl                  [disable string]),
dnl   [ use_string="no" ],
dnl   [])

AM_CONDITIONAL(USE_STRING, test "x$use_string" = xyes)
if test "x$use_string" = xyes; then
  AC_DEFINE(SCM_USE_STRING, 1, [use string])
fi

#
# VECTOR
#
dnl AC_ARG_ENABLE(vector,
dnl   AC_HELP_STRING([--enable-vector],
dnl                  [enable vector]),
dnl   [ use_vector="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(vector,
dnl   AC_HELP_STRING([--disable-vector],
dnl                  [disable vector]),
dnl   [ use_vector="no" ],
dnl   [])

AM_CONDITIONAL(USE_VECTOR, test "x$use_vector" = xyes)
if test "x$use_vector" = xyes; then
  AC_DEFINE(SCM_USE_VECTOR, 1, [use vector])
fi

#
# PORT
#
dnl AC_ARG_ENABLE(port,
dnl   AC_HELP_STRING([--enable-port],
dnl                  [enable port]),
dnl   [ use_port="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(port,
dnl   AC_HELP_STRING([--disable-port],
dnl                  [disable port]),
dnl   [ use_port="no" ],
dnl   [])

AM_CONDITIONAL(USE_PORT, test "x$use_port" = xyes)
if test "x$use_port" = xyes; then
  AC_DEFINE(SCM_USE_PORT, 1, [use port])
fi

#
# READER
#
dnl AC_ARG_ENABLE(reader,
dnl   AC_HELP_STRING([--enable-reader],
dnl                  [enable reader]),
dnl   [ use_reader="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(reader,
dnl   AC_HELP_STRING([--disable-reader],
dnl                  [disable reader]),
dnl   [ use_reader="no" ],
dnl   [])

AM_CONDITIONAL(USE_READER, test "x$use_reader" = xyes)
if test "x$use_reader" = xyes; then
  AC_DEFINE(SCM_USE_READER, 1, [use sexp reader])
fi

#
# WRITER
#
dnl AC_ARG_ENABLE(writer,
dnl   AC_HELP_STRING([--enable-writer],
dnl                  [enable writer]),
dnl   [ use_writer="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(writer,
dnl   AC_HELP_STRING([--disable-writer],
dnl                  [disable writer]),
dnl   [ use_writer="no" ],
dnl   [])

AM_CONDITIONAL(USE_WRITER, test "x$use_writer" = xyes)
if test "x$use_writer" = xyes; then
  AC_DEFINE(SCM_USE_WRITER, 1, [use sexp writer])
fi

#
# LOAD
#
dnl AC_ARG_ENABLE(load,
dnl   AC_HELP_STRING([--enable-load],
dnl                  [enable load]),
dnl   [ use_load="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(load,
dnl   AC_HELP_STRING([--disable-load],
dnl                  [disable load]),
dnl   [ use_load="no" ],
dnl   [])

AM_CONDITIONAL(USE_LOAD, test "x$use_load" = xyes)
if test "x$use_load" = xyes; then
  AC_DEFINE(SCM_USE_LOAD, 1, [use 'load'])
fi

#
# DEEP_CADRS
#
AC_ARG_ENABLE(deep-cadrs,
  AC_HELP_STRING([--enable-deep-cadrs],
                 [enable deep-cadrs]),
  [ use_deep_cadrs="yes" ],
  [])

AC_ARG_ENABLE(deep-cadrs,
  AC_HELP_STRING([--disable-deep-cadrs],
                 [disable deep-cadrs]),
  [ use_deep_cadrs="no" ],
  [])

AM_CONDITIONAL(USE_DEEP_CADRS, test "x$use_deep_cadrs" = xyes)
if test "x$use_deep_cadrs" = xyes; then
  AC_DEFINE(SCM_USE_DEEP_CADRS, 1, [use all c[ad]+r defined in R5RS])
fi

#--------------------------------------
# Optional Features
#--------------------------------------
#
# RAW_C_FORMAT
#
AC_ARG_ENABLE(raw-c-format,
  AC_HELP_STRING([--enable-raw-c-format],
                 [enable raw-c-format]),
  [ use_raw_c_format="yes" ],
  [])

AC_ARG_ENABLE(raw-c-format,
  AC_HELP_STRING([--disable-raw-c-format],
                 [disable raw-c-format]),
  [ use_raw_c_format="no" ],
  [])

AM_CONDITIONAL(USE_RAW_C_FORMAT, test "x$use_raw_c_format" = xyes)
if test "x$use_raw_c_format" = xyes; then
  AC_DEFINE(SCM_USE_RAW_C_FORMAT, 1, [use internal format which takes raw C values from va_list])
fi

#
# SSCM_FORMAT_EXTENSION
#
AC_ARG_ENABLE(sscm-format-extension,
  AC_HELP_STRING([--enable-sscm-format-extension],
                 [enable sscm-format-extension]),
  [ use_sscm_format_extension="yes" ],
  [])

AC_ARG_ENABLE(sscm-format-extension,
  AC_HELP_STRING([--disable-sscm-format-extension],
                 [disable sscm-format-extension]),
  [ use_sscm_format_extension="no" ],
  [])

AM_CONDITIONAL(USE_SSCM_FORMAT_EXTENSION, test "x$use_sscm_format_extension" = xyes)
if test "x$use_sscm_format_extension" = xyes; then
  AC_DEFINE(SCM_USE_SSCM_FORMAT_EXTENSION, 1, [use 'format+'])
fi

#
# SSCM_EXTENSIONS
#
AC_ARG_ENABLE(sscm-extensions,
  AC_HELP_STRING([--enable-sscm-extensions],
                 [enable sscm-extensions]),
  [ use_sscm_extensions="yes" ],
  [])

AC_ARG_ENABLE(sscm-extensions,
  AC_HELP_STRING([--disable-sscm-extensions],
                 [disable sscm-extensions]),
  [ use_sscm_extensions="no" ],
  [])

AM_CONDITIONAL(USE_SSCM_EXTENSIONS, test "x$use_sscm_extensions" = xyes)
if test "x$use_sscm_extensions" = xyes; then
  AC_DEFINE(SCM_USE_SSCM_EXTENSIONS, 1, [use SigScheme-specific extensions])
fi

#
# LEGACY_MACRO
#
dnl AC_ARG_ENABLE(legacy-macro,
dnl   AC_HELP_STRING([--enable-legacy-macro],
dnl                  [enable legacy-macro]),
dnl   [ use_legacy_macro="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(legacy-macro,
dnl   AC_HELP_STRING([--disable-legacy-macro],
dnl                  [disable legacy-macro]),
dnl   [ use_legacy_macro="no" ],
dnl   [])

AM_CONDITIONAL(USE_LEGACY_MACRO, test "x$use_legacy_macro" = xyes)
if test "x$use_legacy_macro" = xyes; then
  AC_DEFINE(SCM_USE_LEGACY_MACRO, 1, [use define-macro])
fi

#
# DUMP
#
dnl AC_ARG_ENABLE(dump,
dnl   AC_HELP_STRING([--enable-dump],
dnl                  [enable dump]),
dnl   [ use_dump="yes" ],
dnl   [])

dnl AC_ARG_ENABLE(dump,
dnl   AC_HELP_STRING([--disable-dump],
dnl                  [disable dump]),
dnl   [ use_dump="no" ],
dnl   [])

AM_CONDITIONAL(USE_DUMP, test "x$use_dump" = xyes)
if test "x$use_dump" = xyes; then
  AC_DEFINE(SCM_USE_DUMP, 1, [use storage dump])
fi

#
# EVAL_C_STRING
#
AC_ARG_ENABLE(eval-c-string,
  AC_HELP_STRING([--enable-eval-c-string],
                 [enable eval-c-string]),
  [ use_eval_c_string="yes" ],
  [])

AC_ARG_ENABLE(eval-c-string,
  AC_HELP_STRING([--disable-eval-c-string],
                 [disable eval-c-string]),
  [ use_eval_c_string="no" ],
  [])

AM_CONDITIONAL(USE_EVAL_C_STRING, test "x$use_eval_c_string" = xyes)
if test "x$use_eval_c_string" = xyes; then
  AC_DEFINE(SCM_USE_EVAL_C_STRING, 1, [use scm_eval_c_string()])
fi

#
# SRFI1
#
AC_ARG_ENABLE(srfi1,
  AC_HELP_STRING([--enable-srfi1],
                 [enable srfi1]),
  [ use_srfi1="yes" ],
  [])

AC_ARG_ENABLE(srfi1,
  AC_HELP_STRING([--disable-srfi1],
                 [disable srfi1]),
  [ use_srfi1="no" ],
  [])

AM_CONDITIONAL(USE_SRFI1, test "x$use_srfi1" = xyes)
if test "x$use_srfi1" = xyes; then
  AC_DEFINE(SCM_USE_SRFI1, 1, [use SRFI-1 list library (broken)])
fi

#
# SRFI2
#
AC_ARG_ENABLE(srfi2,
  AC_HELP_STRING([--enable-srfi2],
                 [enable srfi2]),
  [ use_srfi2="yes" ],
  [])

AC_ARG_ENABLE(srfi2,
  AC_HELP_STRING([--disable-srfi2],
                 [disable srfi2]),
  [ use_srfi2="no" ],
  [])

AM_CONDITIONAL(USE_SRFI2, test "x$use_srfi2" = xyes)
if test "x$use_srfi2" = xyes; then
  AC_DEFINE(SCM_USE_SRFI2, 1, [use SRFI-2 'and-let*'])
fi

#
# SRFI6
#
AC_ARG_ENABLE(srfi6,
  AC_HELP_STRING([--enable-srfi6],
                 [enable srfi6]),
  [ use_srfi6="yes" ],
  [])

AC_ARG_ENABLE(srfi6,
  AC_HELP_STRING([--disable-srfi6],
                 [disable srfi6]),
  [ use_srfi6="no" ],
  [])

AM_CONDITIONAL(USE_SRFI6, test "x$use_srfi6" = xyes)
if test "x$use_srfi6" = xyes; then
  AC_DEFINE(SCM_USE_SRFI6, 1, [use SRFI-6 basic string ports])
fi

#
# SRFI8
#
AC_ARG_ENABLE(srfi8,
  AC_HELP_STRING([--enable-srfi8],
                 [enable srfi8]),
  [ use_srfi8="yes" ],
  [])

AC_ARG_ENABLE(srfi8,
  AC_HELP_STRING([--disable-srfi8],
                 [disable srfi8]),
  [ use_srfi8="no" ],
  [])

AM_CONDITIONAL(USE_SRFI8, test "x$use_srfi8" = xyes)
if test "x$use_srfi8" = xyes; then
  AC_DEFINE(SCM_USE_SRFI8, 1, [use SRFI-8 'receive'])
fi

#
# SRFI22
#
AC_ARG_ENABLE(srfi22,
  AC_HELP_STRING([--enable-srfi22],
                 [enable srfi22]),
  [ use_srfi22="yes" ],
  [])

AC_ARG_ENABLE(srfi22,
  AC_HELP_STRING([--disable-srfi22],
                 [disable srfi22]),
  [ use_srfi22="no" ],
  [])

AM_CONDITIONAL(USE_SRFI22, test "x$use_srfi22" = xyes)
if test "x$use_srfi22" = xyes; then
  AC_DEFINE(SCM_USE_SRFI22, 1, [use SRFI-22 running scheme scripts on Unix])
fi

#
# SRFI23
#
AC_ARG_ENABLE(srfi23,
  AC_HELP_STRING([--enable-srfi23],
                 [enable srfi23]),
  [ use_srfi23="yes" ],
  [])

AC_ARG_ENABLE(srfi23,
  AC_HELP_STRING([--disable-srfi23],
                 [disable srfi23]),
  [ use_srfi23="no" ],
  [])

AM_CONDITIONAL(USE_SRFI23, test "x$use_srfi23" = xyes)
if test "x$use_srfi23" = xyes; then
  AC_DEFINE(SCM_USE_SRFI23, 1, [use SRFI-23 'error'])
fi

#
# SRFI28
#
AC_ARG_ENABLE(srfi28,
  AC_HELP_STRING([--enable-srfi28],
                 [enable srfi28]),
  [ use_srfi28="yes" ],
  [])

AC_ARG_ENABLE(srfi28,
  AC_HELP_STRING([--disable-srfi28],
                 [disable srfi28]),
  [ use_srfi28="no" ],
  [])

AM_CONDITIONAL(USE_SRFI28, test "x$use_srfi28" = xyes)
if test "x$use_srfi28" = xyes; then
  AC_DEFINE(SCM_USE_SRFI28, 1, [use SRFI-28 'format'])
fi

#
# SRFI34
#
AC_ARG_ENABLE(srfi34,
  AC_HELP_STRING([--enable-srfi34],
                 [enable srfi34]),
  [ use_srfi34="yes" ],
  [])

AC_ARG_ENABLE(srfi34,
  AC_HELP_STRING([--disable-srfi34],
                 [disable srfi34]),
  [ use_srfi34="no" ],
  [])

AM_CONDITIONAL(USE_SRFI34, test "x$use_srfi34" = xyes)
if test "x$use_srfi34" = xyes; then
  AC_DEFINE(SCM_USE_SRFI34, 1, [use SRFI-34 exception handling for programs])
fi

#
# SRFI38
#
AC_ARG_ENABLE(srfi38,
  AC_HELP_STRING([--enable-srfi38],
                 [enable srfi38]),
  [ use_srfi38="yes" ],
  [])

AC_ARG_ENABLE(srfi38,
  AC_HELP_STRING([--disable-srfi38],
                 [disable srfi38]),
  [ use_srfi38="no" ],
  [])

AM_CONDITIONAL(USE_SRFI38, test "x$use_srfi38" = xyes)
if test "x$use_srfi38" = xyes; then
  AC_DEFINE(SCM_USE_SRFI38, 1, [use SRFI-38 'write-with-shared-structure'])
fi

#
# SRFI48
#
AC_ARG_ENABLE(srfi48,
  AC_HELP_STRING([--enable-srfi48],
                 [enable srfi48]),
  [ use_srfi48="yes" ],
  [])

AC_ARG_ENABLE(srfi48,
  AC_HELP_STRING([--disable-srfi48],
                 [disable srfi48]),
  [ use_srfi48="no" ],
  [])

AM_CONDITIONAL(USE_SRFI48, test "x$use_srfi48" = xyes)
if test "x$use_srfi48" = xyes; then
  AC_DEFINE(SCM_USE_SRFI48, 1, [use SRFI-48 'format' (superset of SRFI-28)])
fi

#
# SRFI60
#
AC_ARG_ENABLE(srfi60,
  AC_HELP_STRING([--enable-srfi60],
                 [enable srfi60]),
  [ use_srfi60="yes" ],
  [])

AC_ARG_ENABLE(srfi60,
  AC_HELP_STRING([--disable-srfi60],
                 [disable srfi60]),
  [ use_srfi60="no" ],
  [])

AM_CONDITIONAL(USE_SRFI60, test "x$use_srfi60" = xyes)
if test "x$use_srfi60" = xyes; then
  AC_DEFINE(SCM_USE_SRFI60, 1, [use SRFI-60 integers as bits])
fi

#
# SRFI75_NAMED_CHARS
#
AC_ARG_ENABLE(srfi75-named-chars,
  AC_HELP_STRING([--enable-srfi75-named-chars],
                 [enable srfi75-named-chars]),
  [ use_srfi75_named_chars="yes" ],
  [])

AC_ARG_ENABLE(srfi75-named-chars,
  AC_HELP_STRING([--disable-srfi75-named-chars],
                 [disable srfi75-named-chars]),
  [ use_srfi75_named_chars="no" ],
  [])

AM_CONDITIONAL(USE_SRFI75_NAMED_CHARS, test "x$use_srfi75_named_chars" = xyes)
if test "x$use_srfi75_named_chars" = xyes; then
  AC_DEFINE(SCM_USE_SRFI75_NAMED_CHARS, 1, [use named characters of SRFI-75 R6RS unicode data])
fi

#
# SRFI75
#
AC_ARG_ENABLE(srfi75,
  AC_HELP_STRING([--enable-srfi75],
                 [enable srfi75]),
  [ use_srfi75="yes" ],
  [])

AC_ARG_ENABLE(srfi75,
  AC_HELP_STRING([--disable-srfi75],
                 [disable srfi75]),
  [ use_srfi75="no" ],
  [])

AM_CONDITIONAL(USE_SRFI75, test "x$use_srfi75" = xyes)
if test "x$use_srfi75" = xyes; then
  AC_DEFINE(SCM_USE_SRFI75, 1, [use SRFI-75 R6RS unicode data])
fi

#--------------------------------------
# Internal Behaviors
#--------------------------------------
#
# COMPAT_SIOD
#
AC_ARG_ENABLE(compat-siod,
  AC_HELP_STRING([--enable-compat-siod],
                 [enable compat-siod]),
  [ compat_siod="yes" ],
  [])

AC_ARG_ENABLE(compat-siod,
  AC_HELP_STRING([--disable-compat-siod],
                 [disable compat-siod]),
  [ compat_siod="no" ],
  [])

AM_CONDITIONAL(COMPAT_SIOD, test "x$compat_siod" = xyes)
if test "x$compat_siod" = xyes; then
  AC_DEFINE(SCM_COMPAT_SIOD, 1, [use (some) SIOD compatible features])
fi

#
# COMPAT_SIOD_BUGS
#
AC_ARG_ENABLE(compat-siod-bugs,
  AC_HELP_STRING([--enable-compat-siod-bugs],
                 [enable compat-siod-bugs]),
  [ compat_siod_bugs="yes" ],
  [])

AC_ARG_ENABLE(compat-siod-bugs,
  AC_HELP_STRING([--disable-compat-siod-bugs],
                 [disable compat-siod-bugs]),
  [ compat_siod_bugs="no" ],
  [])

AM_CONDITIONAL(COMPAT_SIOD_BUGS, test "x$compat_siod_bugs" = xyes)
if test "x$compat_siod_bugs" = xyes; then
  AC_DEFINE(SCM_COMPAT_SIOD_BUGS, 1, [emulate the buggy behaviors of SIOD])
fi

#
# STRICT_R5RS
#
AC_ARG_ENABLE(strict-r5rs,
  AC_HELP_STRING([--enable-strict-r5rs],
                 [enable strict-r5rs]),
  [ strict_r5rs="yes" ],
  [])

AC_ARG_ENABLE(strict-r5rs,
  AC_HELP_STRING([--disable-strict-r5rs],
                 [disable strict-r5rs]),
  [ strict_r5rs="no" ],
  [])

AM_CONDITIONAL(STRICT_R5RS, test "x$strict_r5rs" = xyes)
if test "x$strict_r5rs" = xyes; then
  AC_DEFINE(SCM_STRICT_R5RS, 1, [use strict R5RS check])
fi

#
# STRICT_NULL_FORM
#
AC_ARG_ENABLE(strict-null-form,
  AC_HELP_STRING([--enable-strict-null-form],
                 [enable strict-null-form]),
  [ strict_null_form="yes" ],
  [])

AC_ARG_ENABLE(strict-null-form,
  AC_HELP_STRING([--disable-strict-null-form],
                 [disable strict-null-form]),
  [ strict_null_form="no" ],
  [])

AM_CONDITIONAL(STRICT_NULL_FORM, test "x$strict_null_form" = xyes)
if test "x$strict_null_form" = xyes; then
  AC_DEFINE(SCM_STRICT_NULL_FORM, 1, [disallow quote-less ()])
fi

#
# STRICT_VECTOR_FORM
#
AC_ARG_ENABLE(strict-vector-form,
  AC_HELP_STRING([--enable-strict-vector-form],
                 [enable strict-vector-form]),
  [ strict_vector_form="yes" ],
  [])

AC_ARG_ENABLE(strict-vector-form,
  AC_HELP_STRING([--disable-strict-vector-form],
                 [disable strict-vector-form]),
  [ strict_vector_form="no" ],
  [])

AM_CONDITIONAL(STRICT_VECTOR_FORM, test "x$strict_vector_form" = xyes)
if test "x$strict_vector_form" = xyes; then
  AC_DEFINE(SCM_STRICT_VECTOR_FORM, 1, [disallow quote-less vector literal])
fi

#
# STRICT_ARGCHECK
#
AC_ARG_ENABLE(strict-argcheck,
  AC_HELP_STRING([--enable-strict-argcheck],
                 [enable strict-argcheck]),
  [ strict_argcheck="yes" ],
  [])

AC_ARG_ENABLE(strict-argcheck,
  AC_HELP_STRING([--disable-strict-argcheck],
                 [disable strict-argcheck]),
  [ strict_argcheck="no" ],
  [])

AM_CONDITIONAL(STRICT_ARGCHECK, test "x$strict_argcheck" = xyes)
if test "x$strict_argcheck" = xyes; then
  AC_DEFINE(SCM_STRICT_ARGCHECK, 1, [enable strict argument check])
fi

#
# STRICT_DEFINE_PLACEMENT
#
AC_ARG_ENABLE(strict-define-placement,
  AC_HELP_STRING([--enable-strict-define-placement],
                 [enable strict-define-placement]),
  [ strict_define_placement="yes" ],
  [])

AC_ARG_ENABLE(strict-define-placement,
  AC_HELP_STRING([--disable-strict-define-placement],
                 [disable strict-define-placement]),
  [ strict_define_placement="no" ],
  [])

AM_CONDITIONAL(STRICT_DEFINE_PLACEMENT, test "x$strict_define_placement" = xyes)
if test "x$strict_define_placement" = xyes; then
  AC_DEFINE(SCM_STRICT_DEFINE_PLACEMENT, 1, [reject invalid internal definitions])
fi

#
# STRICT_ENCODING_CHECK
#
AC_ARG_ENABLE(strict-encoding-check,
  AC_HELP_STRING([--enable-strict-encoding-check],
                 [enable strict-encoding-check]),
  [ strict_encoding_check="yes" ],
  [])

AC_ARG_ENABLE(strict-encoding-check,
  AC_HELP_STRING([--disable-strict-encoding-check],
                 [disable strict-encoding-check]),
  [ strict_encoding_check="no" ],
  [])

AM_CONDITIONAL(STRICT_ENCODING_CHECK, test "x$strict_encoding_check" = xyes)
if test "x$strict_encoding_check" = xyes; then
  AC_DEFINE(SCM_STRICT_ENCODING_CHECK, 1, [do all feasible encoding error checks])
fi

#
# CONST_LIST_LITERAL
#
AC_ARG_ENABLE(const-list-literal,
  AC_HELP_STRING([--enable-const-list-literal],
                 [enable const-list-literal]),
  [ const_list_literal="yes" ],
  [])

AC_ARG_ENABLE(const-list-literal,
  AC_HELP_STRING([--disable-const-list-literal],
                 [disable const-list-literal]),
  [ const_list_literal="no" ],
  [])

AM_CONDITIONAL(CONST_LIST_LITERAL, test "x$const_list_literal" = xyes)
if test "x$const_list_literal" = xyes; then
  AC_DEFINE(SCM_CONST_LIST_LITERAL, 1, [make list literal immutable])
fi

#
# CONST_VECTOR_LITERAL
#
AC_ARG_ENABLE(const-vector-literal,
  AC_HELP_STRING([--enable-const-vector-literal],
                 [enable const-vector-literal]),
  [ const_vector_literal="yes" ],
  [])

AC_ARG_ENABLE(const-vector-literal,
  AC_HELP_STRING([--disable-const-vector-literal],
                 [disable const-vector-literal]),
  [ const_vector_literal="no" ],
  [])

AM_CONDITIONAL(CONST_VECTOR_LITERAL, test "x$const_vector_literal" = xyes)
if test "x$const_vector_literal" = xyes; then
  AC_DEFINE(SCM_CONST_VECTOR_LITERAL, 1, [make vector literal immutable])
fi

#
# ACCESSOR_ASSERT
#
AC_ARG_ENABLE(accessor-assert,
  AC_HELP_STRING([--enable-accessor-assert],
                 [enable accessor-assert]),
  [ accessor_assert="yes" ],
  [])

AC_ARG_ENABLE(accessor-assert,
  AC_HELP_STRING([--disable-accessor-assert],
                 [disable accessor-assert]),
  [ accessor_assert="no" ],
  [])

AM_CONDITIONAL(ACCESSOR_ASSERT, test "x$accessor_assert" = xyes)
if test "x$accessor_assert" = xyes; then
  AC_DEFINE(SCM_ACCESSOR_ASSERT, 1, [enable strict type check with accessor])
fi

#
# VALUECONS
#
AC_ARG_ENABLE(valuecons,
  AC_HELP_STRING([--enable-valuecons],
                 [enable valuecons]),
  [ use_valuecons="yes" ],
  [])

AC_ARG_ENABLE(valuecons,
  AC_HELP_STRING([--disable-valuecons],
                 [disable valuecons]),
  [ use_valuecons="no" ],
  [])

AM_CONDITIONAL(USE_VALUECONS, test "x$use_valuecons" = xyes)
if test "x$use_valuecons" = xyes; then
  AC_DEFINE(SCM_USE_VALUECONS, 1, [use experimental values passing])
fi

#
# NULL_CAPABLE_STRING
#
AC_ARG_ENABLE(null-capable-string,
  AC_HELP_STRING([--enable-null-capable-string],
                 [enable null-capable-string]),
  [ use_null_capable_string="yes" ],
  [])

AC_ARG_ENABLE(null-capable-string,
  AC_HELP_STRING([--disable-null-capable-string],
                 [disable null-capable-string]),
  [ use_null_capable_string="no" ],
  [])

AM_CONDITIONAL(USE_NULL_CAPABLE_STRING, test "x$use_null_capable_string" = xyes)
if test "x$use_null_capable_string" = xyes; then
  AC_DEFINE(SCM_USE_NULL_CAPABLE_STRING, 1, [enable experimental null character in a middle of a string])
fi

#
# WARNING_SUPPRESSOR
#
AC_ARG_ENABLE(warning-suppressor,
  AC_HELP_STRING([--enable-warning-suppressor],
                 [enable warning-suppressor]),
  [ use_warning_suppressor="yes" ],
  [])

AC_ARG_ENABLE(warning-suppressor,
  AC_HELP_STRING([--disable-warning-suppressor],
                 [disable warning-suppressor]),
  [ use_warning_suppressor="no" ],
  [])

AM_CONDITIONAL(USE_WARNING_SUPPRESSOR, test "x$use_warning_suppressor" = xyes)
if test "x$use_warning_suppressor" = xyes; then
  AC_DEFINE(SCM_USE_WARNING_SUPPRESSOR, 1, [suppress warning with little wastes])
fi

#--------------------------------------
# Storage configurations
#--------------------------------------

#
# STORAGE_FATTY
#
AM_CONDITIONAL(USE_STORAGE_FATTY, test "x$use_storage_fatty" = xyes)
if test "x$use_storage_fatty" = xyes; then
  AC_DEFINE(SCM_USE_STORAGE_FATTY, 1, [use the 'fatty' implementation])
fi

#
# STORAGE_COMPACT
#
AM_CONDITIONAL(USE_STORAGE_COMPACT, test "x$use_storage_compact" = xyes)
if test "x$use_storage_compact" = xyes; then
  AC_DEFINE(SCM_USE_STORAGE_COMPACT, 1, [use the 'compact' implementation])
fi

#
# 64BIT_FIXNUM
#
AC_ARG_ENABLE(64bit-fixnum,
  AC_HELP_STRING([--enable-64bit-fixnum],
                 [enable 64bit-fixnum]),
  [ use_64bit_fixnum="yes" ],
  [])

AC_ARG_ENABLE(64bit-fixnum,
  AC_HELP_STRING([--disable-64bit-fixnum],
                 [disable 64bit-fixnum]),
  [ use_64bit_fixnum="no" ],
  [])

AM_CONDITIONAL(USE_64BIT_FIXNUM, test "x$use_64bit_fixnum" = xyes)
if test "x$use_64bit_fixnum" = xyes; then
  AC_DEFINE(SCM_USE_64BIT_FIXNUM, 1, [use int64_t as scm_int_t])
fi

#
# 32BIT_FIXNUM
#
AC_ARG_ENABLE(32bit-fixnum,
  AC_HELP_STRING([--enable-32bit-fixnum],
                 [enable 32bit-fixnum]),
  [ use_32bit_fixnum="yes" ],
  [])

AC_ARG_ENABLE(32bit-fixnum,
  AC_HELP_STRING([--disable-32bit-fixnum],
                 [disable 32bit-fixnum]),
  [ use_32bit_fixnum="no" ],
  [])

AM_CONDITIONAL(USE_32BIT_FIXNUM, test "x$use_32bit_fixnum" = xyes)
if test "x$use_32bit_fixnum" = xyes; then
  AC_DEFINE(SCM_USE_32BIT_FIXNUM, 1, [use int32_t as scm_int_t])
fi

#
# INT_FIXNUM
#
AC_ARG_ENABLE(int-fixnum,
  AC_HELP_STRING([--enable-int-fixnum],
                 [enable int-fixnum]),
  [ use_int_fixnum="yes" ],
  [])

AC_ARG_ENABLE(int-fixnum,
  AC_HELP_STRING([--disable-int-fixnum],
                 [disable int-fixnum]),
  [ use_int_fixnum="no" ],
  [])

AM_CONDITIONAL(USE_INT_FIXNUM, test "x$use_int_fixnum" = xyes)
if test "x$use_int_fixnum" = xyes; then
  AC_DEFINE(SCM_USE_INT_FIXNUM, 1, [use int as scm_int_t])
fi

#
# LONG_FIXNUM
#
AC_ARG_ENABLE(long-fixnum,
  AC_HELP_STRING([--enable-long-fixnum],
                 [enable long-fixnum]),
  [ use_long_fixnum="yes" ],
  [])

AC_ARG_ENABLE(long-fixnum,
  AC_HELP_STRING([--disable-long-fixnum],
                 [disable long-fixnum]),
  [ use_long_fixnum="no" ],
  [])

AM_CONDITIONAL(USE_LONG_FIXNUM, test "x$use_long_fixnum" = xyes)
if test "x$use_long_fixnum" = xyes; then
  AC_DEFINE(SCM_USE_LONG_FIXNUM, 1, [use long as scm_int_t (default)])
fi

#
# 64BIT_SCMREF
#
AC_ARG_ENABLE(64bit-scmref,
  AC_HELP_STRING([--enable-64bit-scmref],
                 [enable 64bit-scmref]),
  [ use_64bit_scmref="yes" ],
  [])

AC_ARG_ENABLE(64bit-scmref,
  AC_HELP_STRING([--disable-64bit-scmref],
                 [disable 64bit-scmref]),
  [ use_64bit_scmref="no" ],
  [])

AM_CONDITIONAL(USE_64BIT_SCMREF, test "x$use_64bit_scmref" = xyes)
if test "x$use_64bit_scmref" = xyes; then
  AC_DEFINE(SCM_USE_64BIT_SCMREF, 1, [use int64_t as scm_intref_t])
fi

#
# 32BIT_SCMREF
#
AC_ARG_ENABLE(32bit-scmref,
  AC_HELP_STRING([--enable-32bit-scmref],
                 [enable 32bit-scmref]),
  [ use_32bit_scmref="yes" ],
  [])

AC_ARG_ENABLE(32bit-scmref,
  AC_HELP_STRING([--disable-32bit-scmref],
                 [disable 32bit-scmref]),
  [ use_32bit_scmref="no" ],
  [])

AM_CONDITIONAL(USE_32BIT_SCMREF, test "x$use_32bit_scmref" = xyes)
if test "x$use_32bit_scmref" = xyes; then
  AC_DEFINE(SCM_USE_32BIT_SCMREF, 1, [use int32_t as scm_intref_t])
fi

#
# INTPTR_SCMREF
#
AC_ARG_ENABLE(intptr-scmref,
  AC_HELP_STRING([--enable-intptr-scmref],
                 [enable intptr-scmref]),
  [ use_intptr_scmref="yes" ],
  [])

AC_ARG_ENABLE(intptr-scmref,
  AC_HELP_STRING([--disable-intptr-scmref],
                 [disable intptr-scmref]),
  [ use_intptr_scmref="no" ],
  [])

AM_CONDITIONAL(USE_INTPTR_SCMREF, test "x$use_intptr_scmref" = xyes)
if test "x$use_intptr_scmref" = xyes; then
  AC_DEFINE(SCM_USE_INTPTR_SCMREF, 1, [use intptr_t as scm_intref_t (default)])
fi

#------------------------------------------------------------------------------
# Configure Character Encoding
#------------------------------------------------------------------------------
use_multibyte_char="yes"
use_utf8="yes"
use_euccn="yes"
use_eucjp="yes"
use_euckr="yes"
use_sjis="yes"
use_utf8_as_default="yes"
use_euccn_as_default="yes"
use_eucjp_as_default="yes"
use_euckr_as_default="yes"
use_sjis_as_default="yes"

# FIXME: Distinguish "default encoding" from "enabled encodings", and make
# "enabled encodings" multi-specifiable.

AC_ARG_ENABLE(multibyte,
  AC_HELP_STRING([--enable-multibyte=ENCODING],
                 [Choose default encoding by ENCODING.
Following encodings are available:
(1)'utf8' (2)'euccn' (3)'eucjp' (4)'euckr' (5)'sjis'
By default, 'utf8' is selected.]),
  [
    case $enable_multibyte in
      utf8|utf-8)
        enable_multibyte="utf8"
        ;;
      euccn)
        ;;
      eucjp|euc-jp)
        enable_multibyte="eucjp"
        ;;
      euckr)
        ;;
      sjis|shift-jis)
        enable_multibyte="sjis"
        ;;
      *)
        enable_multibyte="utf8"
        ;;
    esac
  ],
  [
    enable_multibyte="utf8"
  ])

#
# Support for each encoding will be compiled in if the corresponding
# macro is defined as nonzero
#
# TODO: make these options configurable
AM_CONDITIONAL(USE_MULTIBYTE_CHAR, test "x$use_multibyte_char" = xyes)
if test "x$use_multibyte_char" = xyes; then
  AC_DEFINE(SCM_USE_MULTIBYTE_CHAR, 1, [use multibyte])
fi
AM_CONDITIONAL(USE_UTF8, test "x$use_utf8" = xyes)
if test "x$use_utf8" = xyes; then
  AC_DEFINE(SCM_USE_UTF8, 1, [use utf8])
fi
AM_CONDITIONAL(USE_EUCCN, test "x$use_euccn" = xyes)
if test "x$use_euccn" = xyes; then
  AC_DEFINE(SCM_USE_EUCCN, 1, [use euccn])
fi
AM_CONDITIONAL(USE_EUCJP, test "x$use_eucjp" = xyes)
if test "x$use_eucjp" = xyes; then
  AC_DEFINE(SCM_USE_EUCJP, 1, [use eucjp])
fi
AM_CONDITIONAL(USE_EUCKR, test "x$use_euckr" = xyes)
if test "x$use_euckr" = xyes; then
  AC_DEFINE(SCM_USE_EUCKR, 1, [use euckr])
fi
AM_CONDITIONAL(USE_SJIS, test "x$use_sjis" = xyes)
if test "x$use_sjis" = xyes; then
  AC_DEFINE(SCM_USE_SJIS, 1, [use sjis])
fi

#
# choose exclusively. fallbacks to the unibyte encoding if nothing chosen.
#
AM_CONDITIONAL(USE_UTF8_AS_DEFAULT, test "x$enable_multibyte" = xutf8)
if test "x$enable_multibyte" = xutf8; then
  AC_DEFINE(SCM_USE_UTF8_AS_DEFAULT, 1, [use utf8 as default])
fi
AM_CONDITIONAL(USE_EUCCN_AS_DEFAULT, test "x$enable_multibyte" = xeuccn)
if test "x$enable_multibyte" = xeuccn; then
  AC_DEFINE(SCM_USE_EUCCN_AS_DEFAULT, 1, [use euccn as default])
fi
AM_CONDITIONAL(USE_EUCJP_AS_DEFAULT, test "x$enable_multibyte" = xeucjp)
if test "x$enable_multibyte" = xeucjp; then
  AC_DEFINE(SCM_USE_EUCJP_AS_DEFAULT, 1, [use eucjp as default])
fi
AM_CONDITIONAL(USE_EUCKR_AS_DEFAULT, test "x$enable_multibyte" = xeuckr)
if test "x$enable_multibyte" = xeuckr; then
  AC_DEFINE(SCM_USE_EUCKR_AS_DEFAULT, 1, [use euckr as default])
fi
AM_CONDITIONAL(USE_SJIS_AS_DEFAULT, test "x$enable_multibyte" = xsjis)
if test "x$enable_multibyte" = xsjis; then
  AC_DEFINE(SCM_USE_SJIS_AS_DEFAULT, 1, [use sjis as default])
fi

#------------------------------------------------------------------------------
# Dependency Resolution
#------------------------------------------------------------------------------
# SCM_USE_NUMBER
# if (SCM_USE_INT || SCM_USE_RATIONAL || SCM_USE_REAL || SCM_USE_COMPLEX)
use_number="no"
if test "x$use_int" = xyes; then
  use_number="yes"
fi
if test "x$use_rational" = xyes; then
  use_number="yes"
fi
if test "x$use_real" = xyes; then
  use_number="yes"
fi
if test "x$use_complex" = xyes; then
  use_number="yes"
fi
AM_CONDITIONAL(USE_NUMBER, test "x$use_number" = xyes)
if test "x$use_number" = xyes; then
  AC_DEFINE(SCM_USE_NUMBER, 1, [use number])
fi

# SCM_USE_FORMAT
# if (SCM_USE_SRFI28 || SCM_USE_SRFI48
#     || SCM_USE_SSCM_FORMAT_EXTENSION || SCM_USE_RAW_C_FORMAT)
use_format="no"
if test "x$use_srfi28" = xyes; then
  use_format="yes"
fi
if test "x$use_srfi48" = xyes; then
  use_format="yes"
fi
if test "x$use_sscm_format_extension" = xyes; then
  use_format="yes"
fi
if test "x$use_raw_c_format" = xyes; then
  use_format="yes"
fi
AM_CONDITIONAL(USE_FORMAT, test "x$use_format" = xyes)
if test "x$use_format" = xyes; then
  AC_DEFINE(SCM_USE_FORMAT, 1, [use format])
fi

#------------------------------------------------------------------------------
# Debug
#------------------------------------------------------------------------------
AC_ARG_ENABLE(debug,
  AC_HELP_STRING([--enable-debug],
                 [enable debugging]),
  [
    AC_DEFINE(SCM_DEBUG, 1, [enable debugging mode])
    enable_debug="yes"
  ],
  [
    enable_debug="no"
  ])

# Default Compiler Option for gcc
if test x$CC = xgcc; then
  if test x$enable_debug = xyes; then
    CFLAGS="$CFLAGS -g"
  fi
  CFLAGS="$CFLAGS -Wall -std=gnu89 -pedantic -Wchar-subscripts -Wmissing-declarations -Wredundant-decls -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wcast-align -Wsign-compare"
fi

# This include guard is required to prevent being overridden by
# system-installed config.h on a source that is compiled on
# !SCM_COMPILING_LIBSSCM such as test-c/test_*.c.
AH_TOP([#ifndef __SIGSCHEME_CONFIG_H
#define __SIGSCHEME_CONFIG_H])

# FIXME: temporary solution
AH_BOTTOM([
/* FIXME: temporary solution */
#include "config-old.h"

#endif /* __SIGSCHEME_CONFIG_H */])

echo "--------------------------------------"
echo "| SigScheme Configuration            |"
echo "--------------------------------------"
echo "cflags: '$CFLAGS'"
echo "configuration: '$enable_configuration'"
echo "encoding: '$enable_multibyte'"
echo "debug: '$enable_debug'"

AC_CONFIG_FILES([Makefile
                 doc/Makefile
                 m4/Makefile
                 tools/Makefile
                 include/Makefile
                 include/sigscheme/Makefile
                 src/Makefile
                 lib/Makefile
                 test/Makefile
                 test-c/Makefile
                 test-c2/Makefile
                 test-c2/collect.sh
                 bench/Makefile])

AC_SUBST(GSED)
AC_SUBST(docdir)
AC_SUBST(htmldir)
AC_SUBST(objdir)

AC_OUTPUT
